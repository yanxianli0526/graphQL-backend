// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"fmt"
	"graphql-go-template/internal/models"
	"io"
	"strconv"
	"time"
)

type AllChargeSetting struct {
	UpdatedAt *time.Time      `json:"updatedAt"`
	Patient   *models.Patient `json:"patient"`
	Detail1   *string         `json:"detail1"`
}

type AutoTextFieldInput struct {
	Field string `json:"field"`
	Value string `json:"value"`
}

type BasicChargeInput struct {
	OrganizationBasicChargeID []string `json:"organizationBasicChargeId"`
	PatientID                 string   `json:"patientId"`
}

type CreatePatientBillBasicChargeInput struct {
	ID        string    `json:"id"`
	ItemName  string    `json:"itemName"`
	Type      string    `json:"type"`
	Unit      string    `json:"unit"`
	Price     int       `json:"price"`
	TaxType   string    `json:"taxType"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
	Note      *string   `json:"note"`
}

type CreatePatientBillSubsidyInput struct {
	ID        string    `json:"id"`
	ItemName  string    `json:"itemName"`
	Type      string    `json:"type"`
	Price     int       `json:"price"`
	Unit      *string   `json:"unit"`
	IDNumber  *string   `json:"idNumber"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
	Note      *string   `json:"note"`
}

type DepositRecordInput struct {
	Date      time.Time `json:"date"`
	Type      string    `json:"type"`
	Price     int       `json:"price"`
	Drawee    *string   `json:"drawee"`
	Note      *string   `json:"note"`
	PatientID string    `json:"patientId"`
}

type DepositRecordUpdateInput struct {
	Note *string `json:"note"`
}

type Detail struct {
	Date  *time.Time `json:"date"`
	Text1 *string    `json:"text1"`
	Text2 *string    `json:"text2"`
	Text3 *string    `json:"text3"`
}

type FixedChargeRecord struct {
	UpdatedAt *time.Time      `json:"updatedAt"`
	Items     []string        `json:"items"`
	Patient   *models.Patient `json:"patient"`
}

type InvalidPayRecordInput struct {
	InvalidDate    time.Time `json:"invalidDate"`
	InvalidCaption *string   `json:"invalidCaption"`
}

type NonFixedChargeRecordInput struct {
	NonFixedChargeDate time.Time `json:"nonFixedChargeDate"`
	ItemCategory       string    `json:"itemCategory"`
	ItemName           string    `json:"itemName"`
	Type               string    `json:"type"`
	Unit               string    `json:"unit"`
	Price              int       `json:"price"`
	Quantity           int       `json:"quantity"`
	Subtotal           int       `json:"subtotal"`
	Note               *string   `json:"note"`
	TaxType            string    `json:"taxType"`
}

type OrganizationBasicChargeSettingInput struct {
	ItemName string `json:"itemName"`
	Type     string `json:"type"`
	Unit     string `json:"unit"`
	Price    int    `json:"price"`
	TaxType  string `json:"taxType"`
}

type OrganizationBillDateRangeSettingInput struct {
	FixedChargeStartMonth    string `json:"fixedChargeStartMonth"`
	FixedChargeStartDate     int    `json:"fixedChargeStartDate"`
	FixedChargeEndMonth      string `json:"fixedChargeEndMonth"`
	FixedChargeEndDate       int    `json:"fixedChargeEndDate"`
	NonFixedChargeStartMonth string `json:"nonFixedChargeStartMonth"`
	NonFixedChargeStartDate  int    `json:"nonFixedChargeStartDate"`
	NonFixedChargeEndMonth   string `json:"nonFixedChargeEndMonth"`
	NonFixedChargeEndDate    int    `json:"nonFixedChargeEndDate"`
	TransferRefundStartMonth string `json:"transferRefundStartMonth"`
	TransferRefundStartDate  int    `json:"transferRefundStartDate"`
	TransferRefundEndMonth   string `json:"transferRefundEndMonth"`
	TransferRefundEndDate    int    `json:"transferRefundEndDate"`
}

type OrganizationNonFixedChargeSettingInput struct {
	ItemCategory string `json:"itemCategory"`
	ItemName     string `json:"itemName"`
	Type         string `json:"type"`
	Unit         string `json:"unit"`
	Price        int    `json:"price"`
	TaxType      string `json:"taxType"`
}

type OrganizationPrivacyInput struct {
	Privacy PrivacyType `json:"privacy"`
}

type OrganizationReceiptInput struct {
	FirstText          *string    `json:"firstText"`
	Year               *YearType  `json:"year"`
	YearText           *string    `json:"yearText"`
	Month              *MonthType `json:"month"`
	MonthText          *string    `json:"monthText"`
	LastText           *string    `json:"lastText"`
	IsResetInNextCycle *bool      `json:"isResetInNextCycle"`
}

type OrganizationReceiptTemplateSettingInput struct {
	Name                string   `json:"name"`
	TaxTypes            []string `json:"taxTypes"`
	OrganizationPicture *string  `json:"organizationPicture"`
	TitleName           string   `json:"titleName"`
	PatientInfo         []string `json:"patientInfo"`
	OrganizationInfoOne []string `json:"organizationInfoOne"`
	PriceShowType       string   `json:"priceShowType"`
	OrganizationInfoTwo []string `json:"organizationInfoTwo"`
	NoteText            string   `json:"noteText"`
	SealOneName         string   `json:"sealOneName"`
	SealOnePicture      *string  `json:"sealOnePicture"`
	SealTwoName         string   `json:"sealTwoName"`
	SealTwoPicture      *string  `json:"sealTwoPicture"`
	SealThreeName       string   `json:"sealThreeName"`
	SealThreePicture    *string  `json:"sealThreePicture"`
	SealFourName        string   `json:"sealFourName"`
	SealFourPicture     *string  `json:"sealFourPicture"`
	PartOneName         string   `json:"partOneName"`
	PartTwoName         string   `json:"partTwoName"`
}

type OrganizationSettingInput struct {
	Name                string  `json:"name"`
	AddressCity         *string `json:"addressCity"`
	AddressDistrict     *string `json:"addressDistrict"`
	Address             *string `json:"address"`
	Phone               *string `json:"phone"`
	Fax                 *string `json:"fax"`
	Owner               *string `json:"owner"`
	Email               *string `json:"email"`
	TaxIDNumber         *string `json:"taxIdNumber"`
	RemittanceBank      *string `json:"remittanceBank"`
	RemittanceIDNumber  *string `json:"remittanceIdNumber"`
	RemittanceUserName  *string `json:"remittanceUserName"`
	EstablishmentNumber *string `json:"establishmentNumber"`
}

type PatientBillInput struct {
	PatientID string    `json:"patientId"`
	BillDate  time.Time `json:"billDate"`
}

type PatientBillsInput struct {
	PatientID []string  `json:"patientId"`
	BillDate  time.Time `json:"billDate"`
}

type PatientLatestDepositRecords struct {
	LatestRecord        []*models.DepositRecord `json:"latestRecord"`
	LatestUpdatedRecord []*models.DepositRecord `json:"latestUpdatedRecord"`
}

type PatientLatestNonFixedChargeRecords struct {
	ThisMonth           []*models.NonFixedChargeRecord `json:"thisMonth"`
	LastMonth           []*models.NonFixedChargeRecord `json:"lastMonth"`
	LatestUpdatedRecord []*models.NonFixedChargeRecord `json:"latestUpdatedRecord"`
}

type PatientSort struct {
	ID             string         `json:"id"`
	FirstName      *string        `json:"firstName"`
	LastName       *string        `json:"lastName"`
	UpdatedAt      *time.Time     `json:"updatedAt"`
	IDNumber       string         `json:"idNumber"`
	PhotoURL       *string        `json:"photoUrl"`
	PhotoXPosition *int           `json:"photoXPosition"`
	PhotoYPosition *int           `json:"photoYPosition"`
	ProviderID     string         `json:"providerId"`
	Status         string         `json:"status"`
	Branch         *string        `json:"branch"`
	Room           *string        `json:"room"`
	Bed            *string        `json:"bed"`
	Detail1        *Detail        `json:"detail1"`
	Detail2        *Detail        `json:"detail2"`
	Users          []*models.User `json:"users"`
}

type PayRecordDetailInput struct {
	RecordDate time.Time           `json:"recordDate"`
	Type       PayRecordDetailType `json:"type"`
	Price      int                 `json:"price"`
	Method     string              `json:"method"`
	Payer      *string             `json:"payer"`
	Handler    *string             `json:"handler"`
	Note       *string             `json:"note"`
}

type PayRecordInput struct {
	PayDate    time.Time      `json:"payDate"`
	PatientsID []string       `json:"patientsId"`
	OpenMethod OpenMethodType `json:"openMethod"`
	TaxTypes   []*TaxType     `json:"taxTypes"`
}

type SubsidySettingInput struct {
	ItemName string  `json:"itemName"`
	Type     string  `json:"type"`
	Price    int     `json:"price"`
	Unit     *string `json:"unit"`
	IDNumber *string `json:"idNumber"`
	Note     *string `json:"note"`
}

type SubsidySettingUpdateInput struct {
	ID       *string `json:"id"`
	ItemName string  `json:"itemName"`
	Type     string  `json:"type"`
	Price    int     `json:"price"`
	Unit     *string `json:"unit"`
	IDNumber *string `json:"idNumber"`
	Note     *string `json:"note"`
}

type TransferRefundLeaveInput struct {
	StartDate    time.Time                  `json:"startDate"`
	EndDate      time.Time                  `json:"endDate"`
	Reason       string                     `json:"reason"`
	IsReserveBed string                     `json:"isReserveBed"`
	Note         *string                    `json:"note"`
	Items        []*TransferRefundLeaveItem `json:"items"`
}

type TransferRefundLeaveItem struct {
	ItemName string `json:"itemName"`
	Type     string `json:"type"`
	Price    int    `json:"price"`
}

type UpdatePatientBillBasicChargeInput struct {
	BasicChargeID string    `json:"basicChargeId"`
	ItemName      string    `json:"itemName"`
	Type          string    `json:"type"`
	Unit          string    `json:"unit"`
	Price         int       `json:"price"`
	TaxType       string    `json:"taxType"`
	StartDate     time.Time `json:"startDate"`
	EndDate       time.Time `json:"endDate"`
	Note          *string   `json:"note"`
}

type UpdatePatientBillChargeDatesInput struct {
	TransferRefundStartDate *time.Time `json:"transferRefundStartDate"`
	TransferRefundEndDate   *time.Time `json:"transferRefundEndDate"`
	NonFixedChargeStartDate *time.Time `json:"nonFixedChargeStartDate"`
	NonFixedChargeEndDate   *time.Time `json:"nonFixedChargeEndDate"`
}

type UpdatePatientBillNoteInput struct {
	ID   string  `json:"id"`
	Note *string `json:"note"`
}

type UpdatePatientBillSubsidyInput struct {
	SubsidyID string    `json:"subsidyId"`
	ItemName  *string   `json:"itemName"`
	Type      string    `json:"type"`
	Unit      string    `json:"unit"`
	Price     int       `json:"price"`
	IDNumber  *string   `json:"idNumber"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
	Note      *string   `json:"note"`
}

type UploadFileResponse struct {
	SignedURL  string `json:"signedUrl"`
	PublicLink string `json:"publicLink"`
	FullName   string `json:"fullName"`
}

type UserPreference struct {
	Branch *string  `json:"branch"`
	Locale *string  `json:"locale"`
	Era    *EraType `json:"era"`
}

type EraType string

const (
	// 西元年
	EraTypeChristian EraType = "Christian"
	// 民國年
	EraTypeRepublican EraType = "Republican"
)

var AllEraType = []EraType{
	EraTypeChristian,
	EraTypeRepublican,
}

func (e EraType) IsValid() bool {
	switch e {
	case EraTypeChristian, EraTypeRepublican:
		return true
	}
	return false
}

func (e EraType) String() string {
	return string(e)
}

func (e *EraType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EraType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EraType", str)
	}
	return nil
}

func (e EraType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MonthType string

const (
	// 月份前面加0
	MonthTypeMm MonthType = "MM"
	// 月份前面不加0
	MonthTypeM MonthType = "M"
)

var AllMonthType = []MonthType{
	MonthTypeMm,
	MonthTypeM,
}

func (e MonthType) IsValid() bool {
	switch e {
	case MonthTypeMm, MonthTypeM:
		return true
	}
	return false
}

func (e MonthType) String() string {
	return string(e)
}

func (e *MonthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MonthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MonthType", str)
	}
	return nil
}

func (e MonthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OpenMethodType string

const (
	// 所有帳單費用結算
	OpenMethodTypeAllTax OpenMethodType = "allTax"
	// 分稅別結算
	OpenMethodTypeSelectTax OpenMethodType = "selectTax"
)

var AllOpenMethodType = []OpenMethodType{
	OpenMethodTypeAllTax,
	OpenMethodTypeSelectTax,
}

func (e OpenMethodType) IsValid() bool {
	switch e {
	case OpenMethodTypeAllTax, OpenMethodTypeSelectTax:
		return true
	}
	return false
}

func (e OpenMethodType) String() string {
	return string(e)
}

func (e *OpenMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OpenMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OpenMethodType", str)
	}
	return nil
}

func (e OpenMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PayRecordDetailType string

const (
	// 收費
	PayRecordDetailTypeCharge PayRecordDetailType = "charge"
	// 退費
	PayRecordDetailTypeRefund PayRecordDetailType = "refund"
)

var AllPayRecordDetailType = []PayRecordDetailType{
	PayRecordDetailTypeCharge,
	PayRecordDetailTypeRefund,
}

func (e PayRecordDetailType) IsValid() bool {
	switch e {
	case PayRecordDetailTypeCharge, PayRecordDetailTypeRefund:
		return true
	}
	return false
}

func (e PayRecordDetailType) String() string {
	return string(e)
}

func (e *PayRecordDetailType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PayRecordDetailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PayRecordDetailType", str)
	}
	return nil
}

func (e PayRecordDetailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PrivacyType string

const (
	// 顯示
	PrivacyTypeMask PrivacyType = "mask"
	// 不顯示
	PrivacyTypeUnmask PrivacyType = "unmask"
)

var AllPrivacyType = []PrivacyType{
	PrivacyTypeMask,
	PrivacyTypeUnmask,
}

func (e PrivacyType) IsValid() bool {
	switch e {
	case PrivacyTypeMask, PrivacyTypeUnmask:
		return true
	}
	return false
}

func (e PrivacyType) String() string {
	return string(e)
}

func (e *PrivacyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrivacyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrivacyType", str)
	}
	return nil
}

func (e PrivacyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaxType string

const (
	// 印花稅
	TaxTypeStampTax TaxType = "stampTax"
	// 營業稅
	TaxTypeBusinessTax TaxType = "businessTax"
	// 免稅
	TaxTypeNoTax TaxType = "noTax"
	// 其他
	TaxTypeOther TaxType = "other"
)

var AllTaxType = []TaxType{
	TaxTypeStampTax,
	TaxTypeBusinessTax,
	TaxTypeNoTax,
	TaxTypeOther,
}

func (e TaxType) IsValid() bool {
	switch e {
	case TaxTypeStampTax, TaxTypeBusinessTax, TaxTypeNoTax, TaxTypeOther:
		return true
	}
	return false
}

func (e TaxType) String() string {
	return string(e)
}

func (e *TaxType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaxType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaxType", str)
	}
	return nil
}

func (e TaxType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type YearType string

const (
	// 西元年
	YearTypeChristian YearType = "Christian"
	// 民國年
	YearTypeRepublican YearType = "Republican"
)

var AllYearType = []YearType{
	YearTypeChristian,
	YearTypeRepublican,
}

func (e YearType) IsValid() bool {
	switch e {
	case YearTypeChristian, YearTypeRepublican:
		return true
	}
	return false
}

func (e YearType) String() string {
	return string(e)
}

func (e *YearType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = YearType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid YearType", str)
	}
	return nil
}

func (e YearType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
