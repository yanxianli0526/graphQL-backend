// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	gqlmodels "graphql-go-template/internal/gql/models"
	"graphql-go-template/internal/models"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/lib/pq"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"gorm.io/datatypes"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AutoTextField() AutoTextFieldResolver
	BasicCharge() BasicChargeResolver
	BasicChargeSetting() BasicChargeSettingResolver
	DepositRecord() DepositRecordResolver
	File() FileResolver
	Mutation() MutationResolver
	NonFixedChargeRecord() NonFixedChargeRecordResolver
	Organization() OrganizationResolver
	OrganizationBasicChargeSetting() OrganizationBasicChargeSettingResolver
	OrganizationNonFixedChargeSetting() OrganizationNonFixedChargeSettingResolver
	OrganizationReceipt() OrganizationReceiptResolver
	OrganizationReceiptTemplateSetting() OrganizationReceiptTemplateSettingResolver
	Patient() PatientResolver
	PatientBill() PatientBillResolver
	PayRecord() PayRecordResolver
	PayRecordDetail() PayRecordDetailResolver
	Query() QueryResolver
	Subsidy() SubsidyResolver
	SubsidySetting() SubsidySettingResolver
	TransferRefundLeave() TransferRefundLeaveResolver
	User() UserResolver
}

type DirectiveRoot struct {
	IsAuthenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	AllChargeSetting struct {
		Detail1   func(childComplexity int) int
		Patient   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	AutoTextField struct {
		ID         func(childComplexity int) int
		ItemName   func(childComplexity int) int
		ModuleName func(childComplexity int) int
		Text       func(childComplexity int) int
	}

	BasicCharge struct {
		EndDate       func(childComplexity int) int
		ID            func(childComplexity int) int
		ItemName      func(childComplexity int) int
		Note          func(childComplexity int) int
		Patient       func(childComplexity int) int
		Price         func(childComplexity int) int
		ReceiptDate   func(childComplexity int) int
		ReceiptStatus func(childComplexity int) int
		SortIndex     func(childComplexity int) int
		StartDate     func(childComplexity int) int
		TaxType       func(childComplexity int) int
		Type          func(childComplexity int) int
		Unit          func(childComplexity int) int
		User          func(childComplexity int) int
	}

	BasicChargeSetting struct {
		ID                             func(childComplexity int) int
		OrganizationBasicChargeSetting func(childComplexity int) int
		Patient                        func(childComplexity int) int
		SortIndex                      func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
	}

	DepositRecord struct {
		Date      func(childComplexity int) int
		Drawee    func(childComplexity int) int
		ID        func(childComplexity int) int
		IdNumber  func(childComplexity int) int
		Invalid   func(childComplexity int) int
		Note      func(childComplexity int) int
		Patient   func(childComplexity int) int
		Price     func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	Detail struct {
		Date  func(childComplexity int) int
		Text1 func(childComplexity int) int
		Text2 func(childComplexity int) int
		Text3 func(childComplexity int) int
	}

	File struct {
		FileName func(childComplexity int) int
		ID       func(childComplexity int) int
		Url      func(childComplexity int) int
	}

	FixedChargeRecord struct {
		Items     func(childComplexity int) int
		Patient   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Mutation struct {
		AddPatientBillBasicCharge                func(childComplexity int, input *gqlmodels.CreatePatientBillBasicChargeInput) int
		AddPatientBillSubsidy                    func(childComplexity int, input *gqlmodels.CreatePatientBillSubsidyInput) int
		CancelInvalidPayRecord                   func(childComplexity int, id string) int
		CreateAutoTextField                      func(childComplexity int, input gqlmodels.AutoTextFieldInput) int
		CreateBasicCharge                        func(childComplexity int, input *gqlmodels.BasicChargeInput) int
		CreateDepositRecord                      func(childComplexity int, input gqlmodels.DepositRecordInput) int
		CreateFile                               func(childComplexity int, fileName string) int
		CreateNonFixedChargeRecord               func(childComplexity int, patientID string, input []*gqlmodels.NonFixedChargeRecordInput) int
		CreateOrganizationBasicChargeSetting     func(childComplexity int, input *gqlmodels.OrganizationBasicChargeSettingInput) int
		CreateOrganizationNonFixedChargeSetting  func(childComplexity int, input *gqlmodels.OrganizationNonFixedChargeSettingInput) int
		CreateOrganizationReceiptTemplateSetting func(childComplexity int, input gqlmodels.OrganizationReceiptTemplateSettingInput) int
		CreatePatientBill                        func(childComplexity int, input *gqlmodels.PatientBillInput) int
		CreatePatientBills                       func(childComplexity int, input *gqlmodels.PatientBillsInput) int
		CreatePayRecordDetail                    func(childComplexity int, payRecrodID string, input gqlmodels.PayRecordDetailInput) int
		CreatePayRecords                         func(childComplexity int, input gqlmodels.PayRecordInput) int
		CreateSubsidiesSetting                   func(childComplexity int, patientID string, input []*gqlmodels.SubsidySettingInput) int
		CreateTransferRefundLeave                func(childComplexity int, patientID string, input gqlmodels.TransferRefundLeaveInput) int
		DeleteAutoTextField                      func(childComplexity int, input gqlmodels.AutoTextFieldInput) int
		DeleteNonFixedChargeRecord               func(childComplexity int, id string) int
		DeleteOrganizationBasicChargeSetting     func(childComplexity int, id string) int
		DeleteOrganizationNonFixedChargeSetting  func(childComplexity int, id string) int
		DeleteOrganizationReceiptTemplateSetting func(childComplexity int, id string) int
		DeletePatientBillBasicCharge             func(childComplexity int, basicChargeID string) int
		DeletePatientBillSubsidy                 func(childComplexity int, subsidyID string) int
		DeletePayRecordDetail                    func(childComplexity int, id string) int
		DeleteTransferRefundLeave                func(childComplexity int, id string) int
		InvalidDepositRecord                     func(childComplexity int, id string) int
		InvalidPayRecord                         func(childComplexity int, id string, input gqlmodels.InvalidPayRecordInput) int
		Logout                                   func(childComplexity int) int
		UpdateBasicCharge                        func(childComplexity int, input *gqlmodels.BasicChargeInput) int
		UpdateDepositRecord                      func(childComplexity int, id string, input gqlmodels.DepositRecordUpdateInput) int
		UpdateNonFixedChargeRecord               func(childComplexity int, id string, input *gqlmodels.NonFixedChargeRecordInput) int
		UpdateOrganization                       func(childComplexity int, input *gqlmodels.OrganizationSettingInput) int
		UpdateOrganizationBasicChargeSetting     func(childComplexity int, id string, input *gqlmodels.OrganizationBasicChargeSettingInput) int
		UpdateOrganizationBillDateRangeSetting   func(childComplexity int, input *gqlmodels.OrganizationBillDateRangeSettingInput) int
		UpdateOrganizationNonFixedChargeSetting  func(childComplexity int, id string, input *gqlmodels.OrganizationNonFixedChargeSettingInput) int
		UpdateOrganizationPrivacy                func(childComplexity int, input *gqlmodels.OrganizationPrivacyInput) int
		UpdateOrganizationReceipt                func(childComplexity int, input *gqlmodels.OrganizationReceiptInput) int
		UpdateOrganizationReceiptTemplateSetting func(childComplexity int, id string, input gqlmodels.OrganizationReceiptTemplateSettingInput) int
		UpdatePatientBillBasicCharge             func(childComplexity int, input *gqlmodels.UpdatePatientBillBasicChargeInput) int
		UpdatePatientBillChargeDates             func(childComplexity int, id string, input gqlmodels.UpdatePatientBillChargeDatesInput) int
		UpdatePatientBillNote                    func(childComplexity int, input *gqlmodels.UpdatePatientBillNoteInput) int
		UpdatePatientBillSubsidy                 func(childComplexity int, input *gqlmodels.UpdatePatientBillSubsidyInput) int
		UpdatePayRecorNote                       func(childComplexity int, id string, note string) int
		UpdatePayRecordDetail                    func(childComplexity int, id string, input gqlmodels.PayRecordDetailInput) int
		UpdateSubsidiesSetting                   func(childComplexity int, patientID string, input []*gqlmodels.SubsidySettingUpdateInput, needDeleteID []string) int
		UpdateTransferRefundLeave                func(childComplexity int, id string, input gqlmodels.TransferRefundLeaveInput) int
	}

	NonFixedChargeRecord struct {
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		ItemCategory       func(childComplexity int) int
		ItemName           func(childComplexity int) int
		NonFixedChargeDate func(childComplexity int) int
		Note               func(childComplexity int) int
		Patient            func(childComplexity int) int
		Price              func(childComplexity int) int
		Quantity           func(childComplexity int) int
		ReceiptDate        func(childComplexity int) int
		ReceiptStatus      func(childComplexity int) int
		Subtotal           func(childComplexity int) int
		TaxType            func(childComplexity int) int
		Type               func(childComplexity int) int
		Unit               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		User               func(childComplexity int) int
	}

	Organization struct {
		Address                  func(childComplexity int) int
		AddressCity              func(childComplexity int) int
		AddressDistrict          func(childComplexity int) int
		Branchs                  func(childComplexity int) int
		Email                    func(childComplexity int) int
		EstablishmentNumber      func(childComplexity int) int
		Fax                      func(childComplexity int) int
		FixedChargeEndDate       func(childComplexity int) int
		FixedChargeEndMonth      func(childComplexity int) int
		FixedChargeStartDate     func(childComplexity int) int
		FixedChargeStartMonth    func(childComplexity int) int
		ID                       func(childComplexity int) int
		Name                     func(childComplexity int) int
		NonFixedChargeEndDate    func(childComplexity int) int
		NonFixedChargeEndMonth   func(childComplexity int) int
		NonFixedChargeStartDate  func(childComplexity int) int
		NonFixedChargeStartMonth func(childComplexity int) int
		Owner                    func(childComplexity int) int
		Phone                    func(childComplexity int) int
		Privacy                  func(childComplexity int) int
		RemittanceBank           func(childComplexity int) int
		RemittanceIdNumber       func(childComplexity int) int
		RemittanceUserName       func(childComplexity int) int
		TaxIdNumber              func(childComplexity int) int
		TransferRefundEndDate    func(childComplexity int) int
		TransferRefundEndMonth   func(childComplexity int) int
		TransferRefundStartDate  func(childComplexity int) int
		TransferRefundStartMonth func(childComplexity int) int
	}

	OrganizationBasicChargeSetting struct {
		ID       func(childComplexity int) int
		ItemName func(childComplexity int) int
		Price    func(childComplexity int) int
		TaxType  func(childComplexity int) int
		Type     func(childComplexity int) int
		Unit     func(childComplexity int) int
	}

	OrganizationNonFixedChargeSetting struct {
		ID           func(childComplexity int) int
		ItemCategory func(childComplexity int) int
		ItemName     func(childComplexity int) int
		Price        func(childComplexity int) int
		TaxType      func(childComplexity int) int
		Type         func(childComplexity int) int
		Unit         func(childComplexity int) int
	}

	OrganizationReceipt struct {
		FirstText          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsResetInNextCycle func(childComplexity int) int
		LastText           func(childComplexity int) int
		Month              func(childComplexity int) int
		MonthText          func(childComplexity int) int
		Year               func(childComplexity int) int
		YearText           func(childComplexity int) int
	}

	OrganizationReceiptTemplateSetting struct {
		ID                  func(childComplexity int) int
		Name                func(childComplexity int) int
		NoteText            func(childComplexity int) int
		OrganizationInfoOne func(childComplexity int) int
		OrganizationInfoTwo func(childComplexity int) int
		OrganizationPicture func(childComplexity int) int
		PartOneName         func(childComplexity int) int
		PartTwoName         func(childComplexity int) int
		PatientInfo         func(childComplexity int) int
		PriceShowType       func(childComplexity int) int
		SealFourName        func(childComplexity int) int
		SealFourPicture     func(childComplexity int) int
		SealOneName         func(childComplexity int) int
		SealOnePicture      func(childComplexity int) int
		SealThreeName       func(childComplexity int) int
		SealThreePicture    func(childComplexity int) int
		SealTwoName         func(childComplexity int) int
		SealTwoPicture      func(childComplexity int) int
		TaxTypes            func(childComplexity int) int
		TitleName           func(childComplexity int) int
	}

	Patient struct {
		Bed            func(childComplexity int) int
		Branch         func(childComplexity int) int
		FirstName      func(childComplexity int) int
		ID             func(childComplexity int) int
		IdNumber       func(childComplexity int) int
		LastName       func(childComplexity int) int
		PhotoUrl       func(childComplexity int) int
		PhotoXPosition func(childComplexity int) int
		PhotoYPosition func(childComplexity int) int
		ProviderId     func(childComplexity int) int
		Room           func(childComplexity int) int
		Status         func(childComplexity int) int
		Users          func(childComplexity int) int
	}

	PatientBill struct {
		AmountReceived          func(childComplexity int) int
		BasicCharges            func(childComplexity int) int
		BillMonth               func(childComplexity int) int
		BillYear                func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		EditNoteDate            func(childComplexity int) int
		EditNoteUser            func(childComplexity int) int
		FixedChargeEndDate      func(childComplexity int) int
		FixedChargeStartDate    func(childComplexity int) int
		ID                      func(childComplexity int) int
		NonFixedChargeEndDate   func(childComplexity int) int
		NonFixedChargeRecords   func(childComplexity int) int
		NonFixedChargeStartDate func(childComplexity int) int
		Note                    func(childComplexity int) int
		Patient                 func(childComplexity int) int
		Subsidies               func(childComplexity int) int
		TransferRefundEndDate   func(childComplexity int) int
		TransferRefundLeaves    func(childComplexity int) int
		TransferRefundStartDate func(childComplexity int) int
		User                    func(childComplexity int) int
	}

	PatientLatestDepositRecords struct {
		LatestRecord        func(childComplexity int) int
		LatestUpdatedRecord func(childComplexity int) int
	}

	PatientLatestNonFixedChargeRecords struct {
		LastMonth           func(childComplexity int) int
		LatestUpdatedRecord func(childComplexity int) int
		ThisMonth           func(childComplexity int) int
	}

	PatientSort struct {
		Bed            func(childComplexity int) int
		Branch         func(childComplexity int) int
		Detail1        func(childComplexity int) int
		Detail2        func(childComplexity int) int
		FirstName      func(childComplexity int) int
		ID             func(childComplexity int) int
		IDNumber       func(childComplexity int) int
		LastName       func(childComplexity int) int
		PhotoURL       func(childComplexity int) int
		PhotoXPosition func(childComplexity int) int
		PhotoYPosition func(childComplexity int) int
		ProviderID     func(childComplexity int) int
		Room           func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Users          func(childComplexity int) int
	}

	PayRecord struct {
		AmountDue        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedUser      func(childComplexity int) int
		ID               func(childComplexity int) int
		InvalidCaption   func(childComplexity int) int
		InvalidDate      func(childComplexity int) int
		InvalidUser      func(childComplexity int) int
		IsInvalid        func(childComplexity int) int
		Note             func(childComplexity int) int
		PaidAmount       func(childComplexity int) int
		Patient          func(childComplexity int) int
		PayMonth         func(childComplexity int) int
		PayRecordDetails func(childComplexity int) int
		PayYear          func(childComplexity int) int
		ReceiptNumber    func(childComplexity int) int
		TaxType          func(childComplexity int) int
		User             func(childComplexity int) int
	}

	PayRecordDetail struct {
		Handler    func(childComplexity int) int
		ID         func(childComplexity int) int
		Method     func(childComplexity int) int
		Note       func(childComplexity int) int
		Payer      func(childComplexity int) int
		Price      func(childComplexity int) int
		RecordDate func(childComplexity int) int
		Type       func(childComplexity int) int
		User       func(childComplexity int) int
	}

	Query struct {
		AutoTextFields                      func(childComplexity int, field string) int
		BasicChargeSettings                 func(childComplexity int, patientID string) int
		DepositRecord                       func(childComplexity int, id string) int
		DepositRecords                      func(childComplexity int, patientID string) int
		Me                                  func(childComplexity int) int
		NonFixedChargeRecord                func(childComplexity int, id string) int
		NonFixedChargeRecords               func(childComplexity int, patientID string, startDate time.Time, endDate time.Time) int
		Organization                        func(childComplexity int) int
		OrganizationBasicChargeSetting      func(childComplexity int, id string) int
		OrganizationBasicChargeSettings     func(childComplexity int) int
		OrganizationNonFixedChargeSetting   func(childComplexity int, id string) int
		OrganizationNonFixedChargeSettings  func(childComplexity int) int
		OrganizationReceipt                 func(childComplexity int) int
		OrganizationReceiptTemplateSetting  func(childComplexity int, id string) int
		OrganizationReceiptTemplateSettings func(childComplexity int) int
		Patient                             func(childComplexity int, id string) int
		PatientBill                         func(childComplexity int, patientID string, billYear int, billMonth int) int
		PatientBillBasicCharge              func(childComplexity int, basicChargeID string) int
		PatientBillSubsidy                  func(childComplexity int, subsidyID string) int
		PatientBills                        func(childComplexity int, billDate time.Time) int
		PatientLatestDepositRecords         func(childComplexity int) int
		PatientLatestFixedChargeRecords     func(childComplexity int) int
		PatientLatestNonFixedChargeRecords  func(childComplexity int) int
		Patients                            func(childComplexity int) int
		PayRecord                           func(childComplexity int, id string) int
		PayRecordDetail                     func(childComplexity int, id string) int
		PayRecords                          func(childComplexity int, payDate time.Time) int
		PrintDepositRecord                  func(childComplexity int, id string) int
		PrintPatientBill                    func(childComplexity int, id string) int
		PrintPatientBillGeneralTable        func(childComplexity int, billDate time.Time) int
		PrintPayRecordDetail                func(childComplexity int, id string) int
		PrintPayRecordGeneralTable          func(childComplexity int, billDate time.Time) int
		PrintPayRecordPart                  func(childComplexity int, id string) int
		PrintPayRecordPartByTaxType         func(childComplexity int, id string) int
		PrintPayRecordsPartByTaxType        func(childComplexity int, ids []string) int
		SubsidiesSetting                    func(childComplexity int, patientID string) int
		SubsidySetting                      func(childComplexity int, id string) int
		TransferRefundLeave                 func(childComplexity int, id string) int
		TransferRefundLeaves                func(childComplexity int, patientID string, startDate time.Time, endDate time.Time) int
		User                                func(childComplexity int, id string) int
		Users                               func(childComplexity int) int
	}

	Subsidy struct {
		CreatedAt     func(childComplexity int) int
		EndDate       func(childComplexity int) int
		ID            func(childComplexity int) int
		IdNumber      func(childComplexity int) int
		ItemName      func(childComplexity int) int
		Note          func(childComplexity int) int
		Patient       func(childComplexity int) int
		Price         func(childComplexity int) int
		ReceiptDate   func(childComplexity int) int
		ReceiptStatus func(childComplexity int) int
		SortIndex     func(childComplexity int) int
		StartDate     func(childComplexity int) int
		Type          func(childComplexity int) int
		Unit          func(childComplexity int) int
		User          func(childComplexity int) int
	}

	SubsidySetting struct {
		ID        func(childComplexity int) int
		IdNumber  func(childComplexity int) int
		ItemName  func(childComplexity int) int
		Note      func(childComplexity int) int
		Price     func(childComplexity int) int
		SortIndex func(childComplexity int) int
		Type      func(childComplexity int) int
		Unit      func(childComplexity int) int
	}

	TransferRefundLeave struct {
		CreatedAt     func(childComplexity int) int
		EndDate       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsReserveBed  func(childComplexity int) int
		Items         func(childComplexity int) int
		Note          func(childComplexity int) int
		Reason        func(childComplexity int) int
		ReceiptDate   func(childComplexity int) int
		ReceiptStatus func(childComplexity int) int
		StartDate     func(childComplexity int) int
		User          func(childComplexity int) int
	}

	UploadFileResponse struct {
		FullName   func(childComplexity int) int
		PublicLink func(childComplexity int) int
		SignedURL  func(childComplexity int) int
	}

	User struct {
		DisplayName func(childComplexity int) int
		FirstName   func(childComplexity int) int
		ID          func(childComplexity int) int
		IdNumber    func(childComplexity int) int
		LastName    func(childComplexity int) int
		Preference  func(childComplexity int) int
		ProviderId  func(childComplexity int) int
		Username    func(childComplexity int) int
	}

	UserPreference struct {
		Branch func(childComplexity int) int
		Era    func(childComplexity int) int
		Locale func(childComplexity int) int
	}
}

type AutoTextFieldResolver interface {
	ID(ctx context.Context, obj *models.AutoTextField) (string, error)
}
type BasicChargeResolver interface {
	ID(ctx context.Context, obj *models.BasicCharge) (string, error)
}
type BasicChargeSettingResolver interface {
	ID(ctx context.Context, obj *models.BasicChargeSetting) (string, error)
}
type DepositRecordResolver interface {
	ID(ctx context.Context, obj *models.DepositRecord) (string, error)
}
type FileResolver interface {
	ID(ctx context.Context, obj *models.File) (string, error)
}
type MutationResolver interface {
	CreateAutoTextField(ctx context.Context, input gqlmodels.AutoTextFieldInput) (bool, error)
	DeleteAutoTextField(ctx context.Context, input gqlmodels.AutoTextFieldInput) (bool, error)
	CreateBasicCharge(ctx context.Context, input *gqlmodels.BasicChargeInput) (bool, error)
	UpdateBasicCharge(ctx context.Context, input *gqlmodels.BasicChargeInput) (bool, error)
	CreateDepositRecord(ctx context.Context, input gqlmodels.DepositRecordInput) (string, error)
	UpdateDepositRecord(ctx context.Context, id string, input gqlmodels.DepositRecordUpdateInput) (bool, error)
	InvalidDepositRecord(ctx context.Context, id string) (bool, error)
	CreateFile(ctx context.Context, fileName string) (*gqlmodels.UploadFileResponse, error)
	CreateNonFixedChargeRecord(ctx context.Context, patientID string, input []*gqlmodels.NonFixedChargeRecordInput) (bool, error)
	UpdateNonFixedChargeRecord(ctx context.Context, id string, input *gqlmodels.NonFixedChargeRecordInput) (bool, error)
	DeleteNonFixedChargeRecord(ctx context.Context, id string) (bool, error)
	UpdateOrganization(ctx context.Context, input *gqlmodels.OrganizationSettingInput) (bool, error)
	UpdateOrganizationPrivacy(ctx context.Context, input *gqlmodels.OrganizationPrivacyInput) (bool, error)
	UpdateOrganizationBillDateRangeSetting(ctx context.Context, input *gqlmodels.OrganizationBillDateRangeSettingInput) (bool, error)
	CreateOrganizationBasicChargeSetting(ctx context.Context, input *gqlmodels.OrganizationBasicChargeSettingInput) (bool, error)
	UpdateOrganizationBasicChargeSetting(ctx context.Context, id string, input *gqlmodels.OrganizationBasicChargeSettingInput) (bool, error)
	DeleteOrganizationBasicChargeSetting(ctx context.Context, id string) (bool, error)
	CreateOrganizationNonFixedChargeSetting(ctx context.Context, input *gqlmodels.OrganizationNonFixedChargeSettingInput) (bool, error)
	UpdateOrganizationNonFixedChargeSetting(ctx context.Context, id string, input *gqlmodels.OrganizationNonFixedChargeSettingInput) (bool, error)
	DeleteOrganizationNonFixedChargeSetting(ctx context.Context, id string) (bool, error)
	UpdateOrganizationReceipt(ctx context.Context, input *gqlmodels.OrganizationReceiptInput) (bool, error)
	CreateOrganizationReceiptTemplateSetting(ctx context.Context, input gqlmodels.OrganizationReceiptTemplateSettingInput) (bool, error)
	UpdateOrganizationReceiptTemplateSetting(ctx context.Context, id string, input gqlmodels.OrganizationReceiptTemplateSettingInput) (bool, error)
	DeleteOrganizationReceiptTemplateSetting(ctx context.Context, id string) (bool, error)
	CreatePatientBill(ctx context.Context, input *gqlmodels.PatientBillInput) (string, error)
	CreatePatientBills(ctx context.Context, input *gqlmodels.PatientBillsInput) ([]*models.PatientBill, error)
	UpdatePatientBillNote(ctx context.Context, input *gqlmodels.UpdatePatientBillNoteInput) (bool, error)
	UpdatePatientBillChargeDates(ctx context.Context, id string, input gqlmodels.UpdatePatientBillChargeDatesInput) (bool, error)
	AddPatientBillBasicCharge(ctx context.Context, input *gqlmodels.CreatePatientBillBasicChargeInput) (bool, error)
	UpdatePatientBillBasicCharge(ctx context.Context, input *gqlmodels.UpdatePatientBillBasicChargeInput) (bool, error)
	DeletePatientBillBasicCharge(ctx context.Context, basicChargeID string) (bool, error)
	AddPatientBillSubsidy(ctx context.Context, input *gqlmodels.CreatePatientBillSubsidyInput) (bool, error)
	UpdatePatientBillSubsidy(ctx context.Context, input *gqlmodels.UpdatePatientBillSubsidyInput) (bool, error)
	DeletePatientBillSubsidy(ctx context.Context, subsidyID string) (bool, error)
	CreatePayRecords(ctx context.Context, input gqlmodels.PayRecordInput) (bool, error)
	InvalidPayRecord(ctx context.Context, id string, input gqlmodels.InvalidPayRecordInput) (bool, error)
	CancelInvalidPayRecord(ctx context.Context, id string) (bool, error)
	UpdatePayRecorNote(ctx context.Context, id string, note string) (bool, error)
	CreatePayRecordDetail(ctx context.Context, payRecrodID string, input gqlmodels.PayRecordDetailInput) (bool, error)
	UpdatePayRecordDetail(ctx context.Context, id string, input gqlmodels.PayRecordDetailInput) (bool, error)
	DeletePayRecordDetail(ctx context.Context, id string) (bool, error)
	CreateSubsidiesSetting(ctx context.Context, patientID string, input []*gqlmodels.SubsidySettingInput) (bool, error)
	UpdateSubsidiesSetting(ctx context.Context, patientID string, input []*gqlmodels.SubsidySettingUpdateInput, needDeleteID []string) (bool, error)
	CreateTransferRefundLeave(ctx context.Context, patientID string, input gqlmodels.TransferRefundLeaveInput) (bool, error)
	UpdateTransferRefundLeave(ctx context.Context, id string, input gqlmodels.TransferRefundLeaveInput) (bool, error)
	DeleteTransferRefundLeave(ctx context.Context, id string) (bool, error)
	Logout(ctx context.Context) (bool, error)
}
type NonFixedChargeRecordResolver interface {
	ID(ctx context.Context, obj *models.NonFixedChargeRecord) (string, error)
}
type OrganizationResolver interface {
	ID(ctx context.Context, obj *models.Organization) (string, error)

	Privacy(ctx context.Context, obj *models.Organization) (gqlmodels.PrivacyType, error)
}
type OrganizationBasicChargeSettingResolver interface {
	ID(ctx context.Context, obj *models.OrganizationBasicChargeSetting) (string, error)
}
type OrganizationNonFixedChargeSettingResolver interface {
	ID(ctx context.Context, obj *models.OrganizationNonFixedChargeSetting) (string, error)
}
type OrganizationReceiptResolver interface {
	ID(ctx context.Context, obj *models.OrganizationReceipt) (string, error)

	Year(ctx context.Context, obj *models.OrganizationReceipt) (*gqlmodels.YearType, error)

	Month(ctx context.Context, obj *models.OrganizationReceipt) (*gqlmodels.MonthType, error)
}
type OrganizationReceiptTemplateSettingResolver interface {
	ID(ctx context.Context, obj *models.OrganizationReceiptTemplateSetting) (string, error)
}
type PatientResolver interface {
	ID(ctx context.Context, obj *models.Patient) (string, error)
}
type PatientBillResolver interface {
	ID(ctx context.Context, obj *models.PatientBill) (string, error)
}
type PayRecordResolver interface {
	ID(ctx context.Context, obj *models.PayRecord) (string, error)
}
type PayRecordDetailResolver interface {
	ID(ctx context.Context, obj *models.PayRecordDetail) (string, error)

	Type(ctx context.Context, obj *models.PayRecordDetail) (gqlmodels.PayRecordDetailType, error)
}
type QueryResolver interface {
	Patient(ctx context.Context, id string) (*models.Patient, error)
	Patients(ctx context.Context) ([]*models.Patient, error)
	AutoTextFields(ctx context.Context, field string) ([]*models.AutoTextField, error)
	BasicChargeSettings(ctx context.Context, patientID string) ([]*models.BasicChargeSetting, error)
	DepositRecord(ctx context.Context, id string) (*models.DepositRecord, error)
	DepositRecords(ctx context.Context, patientID string) ([]*models.DepositRecord, error)
	PatientLatestDepositRecords(ctx context.Context) (*gqlmodels.PatientLatestDepositRecords, error)
	PrintDepositRecord(ctx context.Context, id string) (*string, error)
	PatientLatestFixedChargeRecords(ctx context.Context) ([]*gqlmodels.FixedChargeRecord, error)
	NonFixedChargeRecord(ctx context.Context, id string) (*models.NonFixedChargeRecord, error)
	NonFixedChargeRecords(ctx context.Context, patientID string, startDate time.Time, endDate time.Time) ([]*models.NonFixedChargeRecord, error)
	PatientLatestNonFixedChargeRecords(ctx context.Context) (*gqlmodels.PatientLatestNonFixedChargeRecords, error)
	Organization(ctx context.Context) (*models.Organization, error)
	OrganizationBasicChargeSetting(ctx context.Context, id string) (*models.OrganizationBasicChargeSetting, error)
	OrganizationBasicChargeSettings(ctx context.Context) ([]*models.OrganizationBasicChargeSetting, error)
	OrganizationNonFixedChargeSetting(ctx context.Context, id string) (*models.OrganizationNonFixedChargeSetting, error)
	OrganizationNonFixedChargeSettings(ctx context.Context) ([]*models.OrganizationNonFixedChargeSetting, error)
	OrganizationReceipt(ctx context.Context) (*models.OrganizationReceipt, error)
	OrganizationReceiptTemplateSetting(ctx context.Context, id string) (*models.OrganizationReceiptTemplateSetting, error)
	OrganizationReceiptTemplateSettings(ctx context.Context) ([]*models.OrganizationReceiptTemplateSetting, error)
	PatientBill(ctx context.Context, patientID string, billYear int, billMonth int) (*models.PatientBill, error)
	PatientBills(ctx context.Context, billDate time.Time) ([]*models.PatientBill, error)
	PrintPatientBill(ctx context.Context, id string) (string, error)
	PrintPatientBillGeneralTable(ctx context.Context, billDate time.Time) (string, error)
	PatientBillBasicCharge(ctx context.Context, basicChargeID string) (*models.BasicCharge, error)
	PatientBillSubsidy(ctx context.Context, subsidyID string) (*models.Subsidy, error)
	PayRecords(ctx context.Context, payDate time.Time) ([]*models.PayRecord, error)
	PayRecord(ctx context.Context, id string) (*models.PayRecord, error)
	PrintPayRecordDetail(ctx context.Context, id string) (string, error)
	PrintPayRecordPart(ctx context.Context, id string) (string, error)
	PrintPayRecordPartByTaxType(ctx context.Context, id string) (string, error)
	PrintPayRecordsPartByTaxType(ctx context.Context, ids []string) (string, error)
	PrintPayRecordGeneralTable(ctx context.Context, billDate time.Time) (string, error)
	PayRecordDetail(ctx context.Context, id string) (*models.PayRecordDetail, error)
	SubsidiesSetting(ctx context.Context, patientID string) ([]*models.SubsidySetting, error)
	SubsidySetting(ctx context.Context, id string) (*models.SubsidySetting, error)
	TransferRefundLeave(ctx context.Context, id string) (*models.TransferRefundLeave, error)
	TransferRefundLeaves(ctx context.Context, patientID string, startDate time.Time, endDate time.Time) ([]*models.TransferRefundLeave, error)
	Me(ctx context.Context) (*models.User, error)
	User(ctx context.Context, id string) (*models.User, error)
	Users(ctx context.Context) ([]*models.User, error)
}
type SubsidyResolver interface {
	ID(ctx context.Context, obj *models.Subsidy) (string, error)
}
type SubsidySettingResolver interface {
	ID(ctx context.Context, obj *models.SubsidySetting) (string, error)
}
type TransferRefundLeaveResolver interface {
	ID(ctx context.Context, obj *models.TransferRefundLeave) (string, error)
}
type UserResolver interface {
	ID(ctx context.Context, obj *models.User) (string, error)

	Preference(ctx context.Context, obj *models.User) (*gqlmodels.UserPreference, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AllChargeSetting.detail1":
		if e.complexity.AllChargeSetting.Detail1 == nil {
			break
		}

		return e.complexity.AllChargeSetting.Detail1(childComplexity), true

	case "AllChargeSetting.patient":
		if e.complexity.AllChargeSetting.Patient == nil {
			break
		}

		return e.complexity.AllChargeSetting.Patient(childComplexity), true

	case "AllChargeSetting.updatedAt":
		if e.complexity.AllChargeSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.AllChargeSetting.UpdatedAt(childComplexity), true

	case "AutoTextField.id":
		if e.complexity.AutoTextField.ID == nil {
			break
		}

		return e.complexity.AutoTextField.ID(childComplexity), true

	case "AutoTextField.itemName":
		if e.complexity.AutoTextField.ItemName == nil {
			break
		}

		return e.complexity.AutoTextField.ItemName(childComplexity), true

	case "AutoTextField.moduleName":
		if e.complexity.AutoTextField.ModuleName == nil {
			break
		}

		return e.complexity.AutoTextField.ModuleName(childComplexity), true

	case "AutoTextField.text":
		if e.complexity.AutoTextField.Text == nil {
			break
		}

		return e.complexity.AutoTextField.Text(childComplexity), true

	case "BasicCharge.endDate":
		if e.complexity.BasicCharge.EndDate == nil {
			break
		}

		return e.complexity.BasicCharge.EndDate(childComplexity), true

	case "BasicCharge.id":
		if e.complexity.BasicCharge.ID == nil {
			break
		}

		return e.complexity.BasicCharge.ID(childComplexity), true

	case "BasicCharge.itemName":
		if e.complexity.BasicCharge.ItemName == nil {
			break
		}

		return e.complexity.BasicCharge.ItemName(childComplexity), true

	case "BasicCharge.note":
		if e.complexity.BasicCharge.Note == nil {
			break
		}

		return e.complexity.BasicCharge.Note(childComplexity), true

	case "BasicCharge.patient":
		if e.complexity.BasicCharge.Patient == nil {
			break
		}

		return e.complexity.BasicCharge.Patient(childComplexity), true

	case "BasicCharge.price":
		if e.complexity.BasicCharge.Price == nil {
			break
		}

		return e.complexity.BasicCharge.Price(childComplexity), true

	case "BasicCharge.receiptDate":
		if e.complexity.BasicCharge.ReceiptDate == nil {
			break
		}

		return e.complexity.BasicCharge.ReceiptDate(childComplexity), true

	case "BasicCharge.receiptStatus":
		if e.complexity.BasicCharge.ReceiptStatus == nil {
			break
		}

		return e.complexity.BasicCharge.ReceiptStatus(childComplexity), true

	case "BasicCharge.sortIndex":
		if e.complexity.BasicCharge.SortIndex == nil {
			break
		}

		return e.complexity.BasicCharge.SortIndex(childComplexity), true

	case "BasicCharge.startDate":
		if e.complexity.BasicCharge.StartDate == nil {
			break
		}

		return e.complexity.BasicCharge.StartDate(childComplexity), true

	case "BasicCharge.taxType":
		if e.complexity.BasicCharge.TaxType == nil {
			break
		}

		return e.complexity.BasicCharge.TaxType(childComplexity), true

	case "BasicCharge.type":
		if e.complexity.BasicCharge.Type == nil {
			break
		}

		return e.complexity.BasicCharge.Type(childComplexity), true

	case "BasicCharge.unit":
		if e.complexity.BasicCharge.Unit == nil {
			break
		}

		return e.complexity.BasicCharge.Unit(childComplexity), true

	case "BasicCharge.user":
		if e.complexity.BasicCharge.User == nil {
			break
		}

		return e.complexity.BasicCharge.User(childComplexity), true

	case "BasicChargeSetting.id":
		if e.complexity.BasicChargeSetting.ID == nil {
			break
		}

		return e.complexity.BasicChargeSetting.ID(childComplexity), true

	case "BasicChargeSetting.organizationBasicChargeSetting":
		if e.complexity.BasicChargeSetting.OrganizationBasicChargeSetting == nil {
			break
		}

		return e.complexity.BasicChargeSetting.OrganizationBasicChargeSetting(childComplexity), true

	case "BasicChargeSetting.patient":
		if e.complexity.BasicChargeSetting.Patient == nil {
			break
		}

		return e.complexity.BasicChargeSetting.Patient(childComplexity), true

	case "BasicChargeSetting.sortIndex":
		if e.complexity.BasicChargeSetting.SortIndex == nil {
			break
		}

		return e.complexity.BasicChargeSetting.SortIndex(childComplexity), true

	case "BasicChargeSetting.updatedAt":
		if e.complexity.BasicChargeSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.BasicChargeSetting.UpdatedAt(childComplexity), true

	case "DepositRecord.date":
		if e.complexity.DepositRecord.Date == nil {
			break
		}

		return e.complexity.DepositRecord.Date(childComplexity), true

	case "DepositRecord.drawee":
		if e.complexity.DepositRecord.Drawee == nil {
			break
		}

		return e.complexity.DepositRecord.Drawee(childComplexity), true

	case "DepositRecord.id":
		if e.complexity.DepositRecord.ID == nil {
			break
		}

		return e.complexity.DepositRecord.ID(childComplexity), true

	case "DepositRecord.idNumber":
		if e.complexity.DepositRecord.IdNumber == nil {
			break
		}

		return e.complexity.DepositRecord.IdNumber(childComplexity), true

	case "DepositRecord.invalid":
		if e.complexity.DepositRecord.Invalid == nil {
			break
		}

		return e.complexity.DepositRecord.Invalid(childComplexity), true

	case "DepositRecord.note":
		if e.complexity.DepositRecord.Note == nil {
			break
		}

		return e.complexity.DepositRecord.Note(childComplexity), true

	case "DepositRecord.patient":
		if e.complexity.DepositRecord.Patient == nil {
			break
		}

		return e.complexity.DepositRecord.Patient(childComplexity), true

	case "DepositRecord.price":
		if e.complexity.DepositRecord.Price == nil {
			break
		}

		return e.complexity.DepositRecord.Price(childComplexity), true

	case "DepositRecord.type":
		if e.complexity.DepositRecord.Type == nil {
			break
		}

		return e.complexity.DepositRecord.Type(childComplexity), true

	case "DepositRecord.updatedAt":
		if e.complexity.DepositRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.DepositRecord.UpdatedAt(childComplexity), true

	case "DepositRecord.user":
		if e.complexity.DepositRecord.User == nil {
			break
		}

		return e.complexity.DepositRecord.User(childComplexity), true

	case "Detail.date":
		if e.complexity.Detail.Date == nil {
			break
		}

		return e.complexity.Detail.Date(childComplexity), true

	case "Detail.text1":
		if e.complexity.Detail.Text1 == nil {
			break
		}

		return e.complexity.Detail.Text1(childComplexity), true

	case "Detail.text2":
		if e.complexity.Detail.Text2 == nil {
			break
		}

		return e.complexity.Detail.Text2(childComplexity), true

	case "Detail.text3":
		if e.complexity.Detail.Text3 == nil {
			break
		}

		return e.complexity.Detail.Text3(childComplexity), true

	case "File.fileName":
		if e.complexity.File.FileName == nil {
			break
		}

		return e.complexity.File.FileName(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.url":
		if e.complexity.File.Url == nil {
			break
		}

		return e.complexity.File.Url(childComplexity), true

	case "FixedChargeRecord.items":
		if e.complexity.FixedChargeRecord.Items == nil {
			break
		}

		return e.complexity.FixedChargeRecord.Items(childComplexity), true

	case "FixedChargeRecord.patient":
		if e.complexity.FixedChargeRecord.Patient == nil {
			break
		}

		return e.complexity.FixedChargeRecord.Patient(childComplexity), true

	case "FixedChargeRecord.updatedAt":
		if e.complexity.FixedChargeRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.FixedChargeRecord.UpdatedAt(childComplexity), true

	case "Mutation.addPatientBillBasicCharge":
		if e.complexity.Mutation.AddPatientBillBasicCharge == nil {
			break
		}

		args, err := ec.field_Mutation_addPatientBillBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPatientBillBasicCharge(childComplexity, args["input"].(*gqlmodels.CreatePatientBillBasicChargeInput)), true

	case "Mutation.addPatientBillSubsidy":
		if e.complexity.Mutation.AddPatientBillSubsidy == nil {
			break
		}

		args, err := ec.field_Mutation_addPatientBillSubsidy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPatientBillSubsidy(childComplexity, args["input"].(*gqlmodels.CreatePatientBillSubsidyInput)), true

	case "Mutation.cancelInvalidPayRecord":
		if e.complexity.Mutation.CancelInvalidPayRecord == nil {
			break
		}

		args, err := ec.field_Mutation_cancelInvalidPayRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelInvalidPayRecord(childComplexity, args["id"].(string)), true

	case "Mutation.createAutoTextField":
		if e.complexity.Mutation.CreateAutoTextField == nil {
			break
		}

		args, err := ec.field_Mutation_createAutoTextField_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAutoTextField(childComplexity, args["input"].(gqlmodels.AutoTextFieldInput)), true

	case "Mutation.createBasicCharge":
		if e.complexity.Mutation.CreateBasicCharge == nil {
			break
		}

		args, err := ec.field_Mutation_createBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBasicCharge(childComplexity, args["input"].(*gqlmodels.BasicChargeInput)), true

	case "Mutation.createDepositRecord":
		if e.complexity.Mutation.CreateDepositRecord == nil {
			break
		}

		args, err := ec.field_Mutation_createDepositRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDepositRecord(childComplexity, args["input"].(gqlmodels.DepositRecordInput)), true

	case "Mutation.createFile":
		if e.complexity.Mutation.CreateFile == nil {
			break
		}

		args, err := ec.field_Mutation_createFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFile(childComplexity, args["fileName"].(string)), true

	case "Mutation.createNonFixedChargeRecord":
		if e.complexity.Mutation.CreateNonFixedChargeRecord == nil {
			break
		}

		args, err := ec.field_Mutation_createNonFixedChargeRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNonFixedChargeRecord(childComplexity, args["patientId"].(string), args["input"].([]*gqlmodels.NonFixedChargeRecordInput)), true

	case "Mutation.createOrganizationBasicChargeSetting":
		if e.complexity.Mutation.CreateOrganizationBasicChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationBasicChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationBasicChargeSetting(childComplexity, args["input"].(*gqlmodels.OrganizationBasicChargeSettingInput)), true

	case "Mutation.createOrganizationNonFixedChargeSetting":
		if e.complexity.Mutation.CreateOrganizationNonFixedChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationNonFixedChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationNonFixedChargeSetting(childComplexity, args["input"].(*gqlmodels.OrganizationNonFixedChargeSettingInput)), true

	case "Mutation.createOrganizationReceiptTemplateSetting":
		if e.complexity.Mutation.CreateOrganizationReceiptTemplateSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationReceiptTemplateSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationReceiptTemplateSetting(childComplexity, args["input"].(gqlmodels.OrganizationReceiptTemplateSettingInput)), true

	case "Mutation.createPatientBill":
		if e.complexity.Mutation.CreatePatientBill == nil {
			break
		}

		args, err := ec.field_Mutation_createPatientBill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePatientBill(childComplexity, args["input"].(*gqlmodels.PatientBillInput)), true

	case "Mutation.createPatientBills":
		if e.complexity.Mutation.CreatePatientBills == nil {
			break
		}

		args, err := ec.field_Mutation_createPatientBills_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePatientBills(childComplexity, args["input"].(*gqlmodels.PatientBillsInput)), true

	case "Mutation.createPayRecordDetail":
		if e.complexity.Mutation.CreatePayRecordDetail == nil {
			break
		}

		args, err := ec.field_Mutation_createPayRecordDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePayRecordDetail(childComplexity, args["payRecrodId"].(string), args["input"].(gqlmodels.PayRecordDetailInput)), true

	case "Mutation.createPayRecords":
		if e.complexity.Mutation.CreatePayRecords == nil {
			break
		}

		args, err := ec.field_Mutation_createPayRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePayRecords(childComplexity, args["input"].(gqlmodels.PayRecordInput)), true

	case "Mutation.createSubsidiesSetting":
		if e.complexity.Mutation.CreateSubsidiesSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createSubsidiesSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubsidiesSetting(childComplexity, args["patientId"].(string), args["input"].([]*gqlmodels.SubsidySettingInput)), true

	case "Mutation.createTransferRefundLeave":
		if e.complexity.Mutation.CreateTransferRefundLeave == nil {
			break
		}

		args, err := ec.field_Mutation_createTransferRefundLeave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTransferRefundLeave(childComplexity, args["patientId"].(string), args["input"].(gqlmodels.TransferRefundLeaveInput)), true

	case "Mutation.deleteAutoTextField":
		if e.complexity.Mutation.DeleteAutoTextField == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAutoTextField_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAutoTextField(childComplexity, args["input"].(gqlmodels.AutoTextFieldInput)), true

	case "Mutation.deleteNonFixedChargeRecord":
		if e.complexity.Mutation.DeleteNonFixedChargeRecord == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNonFixedChargeRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNonFixedChargeRecord(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganizationBasicChargeSetting":
		if e.complexity.Mutation.DeleteOrganizationBasicChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationBasicChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationBasicChargeSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganizationNonFixedChargeSetting":
		if e.complexity.Mutation.DeleteOrganizationNonFixedChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationNonFixedChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationNonFixedChargeSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteOrganizationReceiptTemplateSetting":
		if e.complexity.Mutation.DeleteOrganizationReceiptTemplateSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationReceiptTemplateSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationReceiptTemplateSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deletePatientBillBasicCharge":
		if e.complexity.Mutation.DeletePatientBillBasicCharge == nil {
			break
		}

		args, err := ec.field_Mutation_deletePatientBillBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePatientBillBasicCharge(childComplexity, args["basicChargeId"].(string)), true

	case "Mutation.deletePatientBillSubsidy":
		if e.complexity.Mutation.DeletePatientBillSubsidy == nil {
			break
		}

		args, err := ec.field_Mutation_deletePatientBillSubsidy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePatientBillSubsidy(childComplexity, args["subsidyId"].(string)), true

	case "Mutation.deletePayRecordDetail":
		if e.complexity.Mutation.DeletePayRecordDetail == nil {
			break
		}

		args, err := ec.field_Mutation_deletePayRecordDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePayRecordDetail(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTransferRefundLeave":
		if e.complexity.Mutation.DeleteTransferRefundLeave == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTransferRefundLeave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTransferRefundLeave(childComplexity, args["id"].(string)), true

	case "Mutation.invalidDepositRecord":
		if e.complexity.Mutation.InvalidDepositRecord == nil {
			break
		}

		args, err := ec.field_Mutation_invalidDepositRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvalidDepositRecord(childComplexity, args["id"].(string)), true

	case "Mutation.invalidPayRecord":
		if e.complexity.Mutation.InvalidPayRecord == nil {
			break
		}

		args, err := ec.field_Mutation_invalidPayRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvalidPayRecord(childComplexity, args["id"].(string), args["input"].(gqlmodels.InvalidPayRecordInput)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.updateBasicCharge":
		if e.complexity.Mutation.UpdateBasicCharge == nil {
			break
		}

		args, err := ec.field_Mutation_updateBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBasicCharge(childComplexity, args["input"].(*gqlmodels.BasicChargeInput)), true

	case "Mutation.updateDepositRecord":
		if e.complexity.Mutation.UpdateDepositRecord == nil {
			break
		}

		args, err := ec.field_Mutation_updateDepositRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepositRecord(childComplexity, args["id"].(string), args["input"].(gqlmodels.DepositRecordUpdateInput)), true

	case "Mutation.updateNonFixedChargeRecord":
		if e.complexity.Mutation.UpdateNonFixedChargeRecord == nil {
			break
		}

		args, err := ec.field_Mutation_updateNonFixedChargeRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNonFixedChargeRecord(childComplexity, args["id"].(string), args["input"].(*gqlmodels.NonFixedChargeRecordInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["input"].(*gqlmodels.OrganizationSettingInput)), true

	case "Mutation.updateOrganizationBasicChargeSetting":
		if e.complexity.Mutation.UpdateOrganizationBasicChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationBasicChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationBasicChargeSetting(childComplexity, args["id"].(string), args["input"].(*gqlmodels.OrganizationBasicChargeSettingInput)), true

	case "Mutation.updateOrganizationBillDateRangeSetting":
		if e.complexity.Mutation.UpdateOrganizationBillDateRangeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationBillDateRangeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationBillDateRangeSetting(childComplexity, args["input"].(*gqlmodels.OrganizationBillDateRangeSettingInput)), true

	case "Mutation.updateOrganizationNonFixedChargeSetting":
		if e.complexity.Mutation.UpdateOrganizationNonFixedChargeSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationNonFixedChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationNonFixedChargeSetting(childComplexity, args["id"].(string), args["input"].(*gqlmodels.OrganizationNonFixedChargeSettingInput)), true

	case "Mutation.updateOrganizationPrivacy":
		if e.complexity.Mutation.UpdateOrganizationPrivacy == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationPrivacy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationPrivacy(childComplexity, args["input"].(*gqlmodels.OrganizationPrivacyInput)), true

	case "Mutation.updateOrganizationReceipt":
		if e.complexity.Mutation.UpdateOrganizationReceipt == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationReceipt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationReceipt(childComplexity, args["input"].(*gqlmodels.OrganizationReceiptInput)), true

	case "Mutation.updateOrganizationReceiptTemplateSetting":
		if e.complexity.Mutation.UpdateOrganizationReceiptTemplateSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationReceiptTemplateSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationReceiptTemplateSetting(childComplexity, args["id"].(string), args["input"].(gqlmodels.OrganizationReceiptTemplateSettingInput)), true

	case "Mutation.updatePatientBillBasicCharge":
		if e.complexity.Mutation.UpdatePatientBillBasicCharge == nil {
			break
		}

		args, err := ec.field_Mutation_updatePatientBillBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePatientBillBasicCharge(childComplexity, args["input"].(*gqlmodels.UpdatePatientBillBasicChargeInput)), true

	case "Mutation.updatePatientBillChargeDates":
		if e.complexity.Mutation.UpdatePatientBillChargeDates == nil {
			break
		}

		args, err := ec.field_Mutation_updatePatientBillChargeDates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePatientBillChargeDates(childComplexity, args["id"].(string), args["input"].(gqlmodels.UpdatePatientBillChargeDatesInput)), true

	case "Mutation.updatePatientBillNote":
		if e.complexity.Mutation.UpdatePatientBillNote == nil {
			break
		}

		args, err := ec.field_Mutation_updatePatientBillNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePatientBillNote(childComplexity, args["input"].(*gqlmodels.UpdatePatientBillNoteInput)), true

	case "Mutation.updatePatientBillSubsidy":
		if e.complexity.Mutation.UpdatePatientBillSubsidy == nil {
			break
		}

		args, err := ec.field_Mutation_updatePatientBillSubsidy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePatientBillSubsidy(childComplexity, args["input"].(*gqlmodels.UpdatePatientBillSubsidyInput)), true

	case "Mutation.updatePayRecorNote":
		if e.complexity.Mutation.UpdatePayRecorNote == nil {
			break
		}

		args, err := ec.field_Mutation_updatePayRecorNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePayRecorNote(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.updatePayRecordDetail":
		if e.complexity.Mutation.UpdatePayRecordDetail == nil {
			break
		}

		args, err := ec.field_Mutation_updatePayRecordDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePayRecordDetail(childComplexity, args["id"].(string), args["input"].(gqlmodels.PayRecordDetailInput)), true

	case "Mutation.updateSubsidiesSetting":
		if e.complexity.Mutation.UpdateSubsidiesSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateSubsidiesSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSubsidiesSetting(childComplexity, args["patientId"].(string), args["input"].([]*gqlmodels.SubsidySettingUpdateInput), args["needDeleteId"].([]string)), true

	case "Mutation.updateTransferRefundLeave":
		if e.complexity.Mutation.UpdateTransferRefundLeave == nil {
			break
		}

		args, err := ec.field_Mutation_updateTransferRefundLeave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTransferRefundLeave(childComplexity, args["id"].(string), args["input"].(gqlmodels.TransferRefundLeaveInput)), true

	case "NonFixedChargeRecord.createdAt":
		if e.complexity.NonFixedChargeRecord.CreatedAt == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.CreatedAt(childComplexity), true

	case "NonFixedChargeRecord.id":
		if e.complexity.NonFixedChargeRecord.ID == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.ID(childComplexity), true

	case "NonFixedChargeRecord.itemCategory":
		if e.complexity.NonFixedChargeRecord.ItemCategory == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.ItemCategory(childComplexity), true

	case "NonFixedChargeRecord.itemName":
		if e.complexity.NonFixedChargeRecord.ItemName == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.ItemName(childComplexity), true

	case "NonFixedChargeRecord.nonFixedChargeDate":
		if e.complexity.NonFixedChargeRecord.NonFixedChargeDate == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.NonFixedChargeDate(childComplexity), true

	case "NonFixedChargeRecord.note":
		if e.complexity.NonFixedChargeRecord.Note == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Note(childComplexity), true

	case "NonFixedChargeRecord.patient":
		if e.complexity.NonFixedChargeRecord.Patient == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Patient(childComplexity), true

	case "NonFixedChargeRecord.price":
		if e.complexity.NonFixedChargeRecord.Price == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Price(childComplexity), true

	case "NonFixedChargeRecord.quantity":
		if e.complexity.NonFixedChargeRecord.Quantity == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Quantity(childComplexity), true

	case "NonFixedChargeRecord.receiptDate":
		if e.complexity.NonFixedChargeRecord.ReceiptDate == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.ReceiptDate(childComplexity), true

	case "NonFixedChargeRecord.receiptStatus":
		if e.complexity.NonFixedChargeRecord.ReceiptStatus == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.ReceiptStatus(childComplexity), true

	case "NonFixedChargeRecord.subtotal":
		if e.complexity.NonFixedChargeRecord.Subtotal == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Subtotal(childComplexity), true

	case "NonFixedChargeRecord.taxType":
		if e.complexity.NonFixedChargeRecord.TaxType == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.TaxType(childComplexity), true

	case "NonFixedChargeRecord.type":
		if e.complexity.NonFixedChargeRecord.Type == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Type(childComplexity), true

	case "NonFixedChargeRecord.unit":
		if e.complexity.NonFixedChargeRecord.Unit == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.Unit(childComplexity), true

	case "NonFixedChargeRecord.updatedAt":
		if e.complexity.NonFixedChargeRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.UpdatedAt(childComplexity), true

	case "NonFixedChargeRecord.user":
		if e.complexity.NonFixedChargeRecord.User == nil {
			break
		}

		return e.complexity.NonFixedChargeRecord.User(childComplexity), true

	case "Organization.address":
		if e.complexity.Organization.Address == nil {
			break
		}

		return e.complexity.Organization.Address(childComplexity), true

	case "Organization.addressCity":
		if e.complexity.Organization.AddressCity == nil {
			break
		}

		return e.complexity.Organization.AddressCity(childComplexity), true

	case "Organization.addressDistrict":
		if e.complexity.Organization.AddressDistrict == nil {
			break
		}

		return e.complexity.Organization.AddressDistrict(childComplexity), true

	case "Organization.branchs":
		if e.complexity.Organization.Branchs == nil {
			break
		}

		return e.complexity.Organization.Branchs(childComplexity), true

	case "Organization.email":
		if e.complexity.Organization.Email == nil {
			break
		}

		return e.complexity.Organization.Email(childComplexity), true

	case "Organization.establishmentNumber":
		if e.complexity.Organization.EstablishmentNumber == nil {
			break
		}

		return e.complexity.Organization.EstablishmentNumber(childComplexity), true

	case "Organization.fax":
		if e.complexity.Organization.Fax == nil {
			break
		}

		return e.complexity.Organization.Fax(childComplexity), true

	case "Organization.fixedChargeEndDate":
		if e.complexity.Organization.FixedChargeEndDate == nil {
			break
		}

		return e.complexity.Organization.FixedChargeEndDate(childComplexity), true

	case "Organization.fixedChargeEndMonth":
		if e.complexity.Organization.FixedChargeEndMonth == nil {
			break
		}

		return e.complexity.Organization.FixedChargeEndMonth(childComplexity), true

	case "Organization.fixedChargeStartDate":
		if e.complexity.Organization.FixedChargeStartDate == nil {
			break
		}

		return e.complexity.Organization.FixedChargeStartDate(childComplexity), true

	case "Organization.fixedChargeStartMonth":
		if e.complexity.Organization.FixedChargeStartMonth == nil {
			break
		}

		return e.complexity.Organization.FixedChargeStartMonth(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.nonFixedChargeEndDate":
		if e.complexity.Organization.NonFixedChargeEndDate == nil {
			break
		}

		return e.complexity.Organization.NonFixedChargeEndDate(childComplexity), true

	case "Organization.nonFixedChargeEndMonth":
		if e.complexity.Organization.NonFixedChargeEndMonth == nil {
			break
		}

		return e.complexity.Organization.NonFixedChargeEndMonth(childComplexity), true

	case "Organization.nonFixedChargeStartDate":
		if e.complexity.Organization.NonFixedChargeStartDate == nil {
			break
		}

		return e.complexity.Organization.NonFixedChargeStartDate(childComplexity), true

	case "Organization.nonFixedChargeStartMonth":
		if e.complexity.Organization.NonFixedChargeStartMonth == nil {
			break
		}

		return e.complexity.Organization.NonFixedChargeStartMonth(childComplexity), true

	case "Organization.owner":
		if e.complexity.Organization.Owner == nil {
			break
		}

		return e.complexity.Organization.Owner(childComplexity), true

	case "Organization.phone":
		if e.complexity.Organization.Phone == nil {
			break
		}

		return e.complexity.Organization.Phone(childComplexity), true

	case "Organization.privacy":
		if e.complexity.Organization.Privacy == nil {
			break
		}

		return e.complexity.Organization.Privacy(childComplexity), true

	case "Organization.remittanceBank":
		if e.complexity.Organization.RemittanceBank == nil {
			break
		}

		return e.complexity.Organization.RemittanceBank(childComplexity), true

	case "Organization.remittanceIdNumber":
		if e.complexity.Organization.RemittanceIdNumber == nil {
			break
		}

		return e.complexity.Organization.RemittanceIdNumber(childComplexity), true

	case "Organization.remittanceUserName":
		if e.complexity.Organization.RemittanceUserName == nil {
			break
		}

		return e.complexity.Organization.RemittanceUserName(childComplexity), true

	case "Organization.taxIdNumber":
		if e.complexity.Organization.TaxIdNumber == nil {
			break
		}

		return e.complexity.Organization.TaxIdNumber(childComplexity), true

	case "Organization.transferRefundEndDate":
		if e.complexity.Organization.TransferRefundEndDate == nil {
			break
		}

		return e.complexity.Organization.TransferRefundEndDate(childComplexity), true

	case "Organization.transferRefundEndMonth":
		if e.complexity.Organization.TransferRefundEndMonth == nil {
			break
		}

		return e.complexity.Organization.TransferRefundEndMonth(childComplexity), true

	case "Organization.transferRefundStartDate":
		if e.complexity.Organization.TransferRefundStartDate == nil {
			break
		}

		return e.complexity.Organization.TransferRefundStartDate(childComplexity), true

	case "Organization.transferRefundStartMonth":
		if e.complexity.Organization.TransferRefundStartMonth == nil {
			break
		}

		return e.complexity.Organization.TransferRefundStartMonth(childComplexity), true

	case "OrganizationBasicChargeSetting.id":
		if e.complexity.OrganizationBasicChargeSetting.ID == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.ID(childComplexity), true

	case "OrganizationBasicChargeSetting.itemName":
		if e.complexity.OrganizationBasicChargeSetting.ItemName == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.ItemName(childComplexity), true

	case "OrganizationBasicChargeSetting.price":
		if e.complexity.OrganizationBasicChargeSetting.Price == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.Price(childComplexity), true

	case "OrganizationBasicChargeSetting.taxType":
		if e.complexity.OrganizationBasicChargeSetting.TaxType == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.TaxType(childComplexity), true

	case "OrganizationBasicChargeSetting.type":
		if e.complexity.OrganizationBasicChargeSetting.Type == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.Type(childComplexity), true

	case "OrganizationBasicChargeSetting.unit":
		if e.complexity.OrganizationBasicChargeSetting.Unit == nil {
			break
		}

		return e.complexity.OrganizationBasicChargeSetting.Unit(childComplexity), true

	case "OrganizationNonFixedChargeSetting.id":
		if e.complexity.OrganizationNonFixedChargeSetting.ID == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.ID(childComplexity), true

	case "OrganizationNonFixedChargeSetting.itemCategory":
		if e.complexity.OrganizationNonFixedChargeSetting.ItemCategory == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.ItemCategory(childComplexity), true

	case "OrganizationNonFixedChargeSetting.itemName":
		if e.complexity.OrganizationNonFixedChargeSetting.ItemName == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.ItemName(childComplexity), true

	case "OrganizationNonFixedChargeSetting.price":
		if e.complexity.OrganizationNonFixedChargeSetting.Price == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.Price(childComplexity), true

	case "OrganizationNonFixedChargeSetting.taxType":
		if e.complexity.OrganizationNonFixedChargeSetting.TaxType == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.TaxType(childComplexity), true

	case "OrganizationNonFixedChargeSetting.type":
		if e.complexity.OrganizationNonFixedChargeSetting.Type == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.Type(childComplexity), true

	case "OrganizationNonFixedChargeSetting.unit":
		if e.complexity.OrganizationNonFixedChargeSetting.Unit == nil {
			break
		}

		return e.complexity.OrganizationNonFixedChargeSetting.Unit(childComplexity), true

	case "OrganizationReceipt.firstText":
		if e.complexity.OrganizationReceipt.FirstText == nil {
			break
		}

		return e.complexity.OrganizationReceipt.FirstText(childComplexity), true

	case "OrganizationReceipt.id":
		if e.complexity.OrganizationReceipt.ID == nil {
			break
		}

		return e.complexity.OrganizationReceipt.ID(childComplexity), true

	case "OrganizationReceipt.isResetInNextCycle":
		if e.complexity.OrganizationReceipt.IsResetInNextCycle == nil {
			break
		}

		return e.complexity.OrganizationReceipt.IsResetInNextCycle(childComplexity), true

	case "OrganizationReceipt.lastText":
		if e.complexity.OrganizationReceipt.LastText == nil {
			break
		}

		return e.complexity.OrganizationReceipt.LastText(childComplexity), true

	case "OrganizationReceipt.month":
		if e.complexity.OrganizationReceipt.Month == nil {
			break
		}

		return e.complexity.OrganizationReceipt.Month(childComplexity), true

	case "OrganizationReceipt.monthText":
		if e.complexity.OrganizationReceipt.MonthText == nil {
			break
		}

		return e.complexity.OrganizationReceipt.MonthText(childComplexity), true

	case "OrganizationReceipt.year":
		if e.complexity.OrganizationReceipt.Year == nil {
			break
		}

		return e.complexity.OrganizationReceipt.Year(childComplexity), true

	case "OrganizationReceipt.yearText":
		if e.complexity.OrganizationReceipt.YearText == nil {
			break
		}

		return e.complexity.OrganizationReceipt.YearText(childComplexity), true

	case "OrganizationReceiptTemplateSetting.id":
		if e.complexity.OrganizationReceiptTemplateSetting.ID == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.ID(childComplexity), true

	case "OrganizationReceiptTemplateSetting.name":
		if e.complexity.OrganizationReceiptTemplateSetting.Name == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.Name(childComplexity), true

	case "OrganizationReceiptTemplateSetting.noteText":
		if e.complexity.OrganizationReceiptTemplateSetting.NoteText == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.NoteText(childComplexity), true

	case "OrganizationReceiptTemplateSetting.organizationInfoOne":
		if e.complexity.OrganizationReceiptTemplateSetting.OrganizationInfoOne == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.OrganizationInfoOne(childComplexity), true

	case "OrganizationReceiptTemplateSetting.organizationInfoTwo":
		if e.complexity.OrganizationReceiptTemplateSetting.OrganizationInfoTwo == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.OrganizationInfoTwo(childComplexity), true

	case "OrganizationReceiptTemplateSetting.organizationPicture":
		if e.complexity.OrganizationReceiptTemplateSetting.OrganizationPicture == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.OrganizationPicture(childComplexity), true

	case "OrganizationReceiptTemplateSetting.partOneName":
		if e.complexity.OrganizationReceiptTemplateSetting.PartOneName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.PartOneName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.partTwoName":
		if e.complexity.OrganizationReceiptTemplateSetting.PartTwoName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.PartTwoName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.patientInfo":
		if e.complexity.OrganizationReceiptTemplateSetting.PatientInfo == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.PatientInfo(childComplexity), true

	case "OrganizationReceiptTemplateSetting.priceShowType":
		if e.complexity.OrganizationReceiptTemplateSetting.PriceShowType == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.PriceShowType(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealFourName":
		if e.complexity.OrganizationReceiptTemplateSetting.SealFourName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealFourName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealFourPicture":
		if e.complexity.OrganizationReceiptTemplateSetting.SealFourPicture == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealFourPicture(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealOneName":
		if e.complexity.OrganizationReceiptTemplateSetting.SealOneName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealOneName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealOnePicture":
		if e.complexity.OrganizationReceiptTemplateSetting.SealOnePicture == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealOnePicture(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealThreeName":
		if e.complexity.OrganizationReceiptTemplateSetting.SealThreeName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealThreeName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealThreePicture":
		if e.complexity.OrganizationReceiptTemplateSetting.SealThreePicture == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealThreePicture(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealTwoName":
		if e.complexity.OrganizationReceiptTemplateSetting.SealTwoName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealTwoName(childComplexity), true

	case "OrganizationReceiptTemplateSetting.sealTwoPicture":
		if e.complexity.OrganizationReceiptTemplateSetting.SealTwoPicture == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.SealTwoPicture(childComplexity), true

	case "OrganizationReceiptTemplateSetting.taxTypes":
		if e.complexity.OrganizationReceiptTemplateSetting.TaxTypes == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.TaxTypes(childComplexity), true

	case "OrganizationReceiptTemplateSetting.titleName":
		if e.complexity.OrganizationReceiptTemplateSetting.TitleName == nil {
			break
		}

		return e.complexity.OrganizationReceiptTemplateSetting.TitleName(childComplexity), true

	case "Patient.bed":
		if e.complexity.Patient.Bed == nil {
			break
		}

		return e.complexity.Patient.Bed(childComplexity), true

	case "Patient.branch":
		if e.complexity.Patient.Branch == nil {
			break
		}

		return e.complexity.Patient.Branch(childComplexity), true

	case "Patient.firstName":
		if e.complexity.Patient.FirstName == nil {
			break
		}

		return e.complexity.Patient.FirstName(childComplexity), true

	case "Patient.id":
		if e.complexity.Patient.ID == nil {
			break
		}

		return e.complexity.Patient.ID(childComplexity), true

	case "Patient.idNumber":
		if e.complexity.Patient.IdNumber == nil {
			break
		}

		return e.complexity.Patient.IdNumber(childComplexity), true

	case "Patient.lastName":
		if e.complexity.Patient.LastName == nil {
			break
		}

		return e.complexity.Patient.LastName(childComplexity), true

	case "Patient.photoUrl":
		if e.complexity.Patient.PhotoUrl == nil {
			break
		}

		return e.complexity.Patient.PhotoUrl(childComplexity), true

	case "Patient.photoXPosition":
		if e.complexity.Patient.PhotoXPosition == nil {
			break
		}

		return e.complexity.Patient.PhotoXPosition(childComplexity), true

	case "Patient.photoYPosition":
		if e.complexity.Patient.PhotoYPosition == nil {
			break
		}

		return e.complexity.Patient.PhotoYPosition(childComplexity), true

	case "Patient.providerId":
		if e.complexity.Patient.ProviderId == nil {
			break
		}

		return e.complexity.Patient.ProviderId(childComplexity), true

	case "Patient.room":
		if e.complexity.Patient.Room == nil {
			break
		}

		return e.complexity.Patient.Room(childComplexity), true

	case "Patient.status":
		if e.complexity.Patient.Status == nil {
			break
		}

		return e.complexity.Patient.Status(childComplexity), true

	case "Patient.users":
		if e.complexity.Patient.Users == nil {
			break
		}

		return e.complexity.Patient.Users(childComplexity), true

	case "PatientBill.amountReceived":
		if e.complexity.PatientBill.AmountReceived == nil {
			break
		}

		return e.complexity.PatientBill.AmountReceived(childComplexity), true

	case "PatientBill.basicCharges":
		if e.complexity.PatientBill.BasicCharges == nil {
			break
		}

		return e.complexity.PatientBill.BasicCharges(childComplexity), true

	case "PatientBill.billMonth":
		if e.complexity.PatientBill.BillMonth == nil {
			break
		}

		return e.complexity.PatientBill.BillMonth(childComplexity), true

	case "PatientBill.billYear":
		if e.complexity.PatientBill.BillYear == nil {
			break
		}

		return e.complexity.PatientBill.BillYear(childComplexity), true

	case "PatientBill.createdAt":
		if e.complexity.PatientBill.CreatedAt == nil {
			break
		}

		return e.complexity.PatientBill.CreatedAt(childComplexity), true

	case "PatientBill.editNoteDate":
		if e.complexity.PatientBill.EditNoteDate == nil {
			break
		}

		return e.complexity.PatientBill.EditNoteDate(childComplexity), true

	case "PatientBill.editNoteUser":
		if e.complexity.PatientBill.EditNoteUser == nil {
			break
		}

		return e.complexity.PatientBill.EditNoteUser(childComplexity), true

	case "PatientBill.fixedChargeEndDate":
		if e.complexity.PatientBill.FixedChargeEndDate == nil {
			break
		}

		return e.complexity.PatientBill.FixedChargeEndDate(childComplexity), true

	case "PatientBill.fixedChargeStartDate":
		if e.complexity.PatientBill.FixedChargeStartDate == nil {
			break
		}

		return e.complexity.PatientBill.FixedChargeStartDate(childComplexity), true

	case "PatientBill.id":
		if e.complexity.PatientBill.ID == nil {
			break
		}

		return e.complexity.PatientBill.ID(childComplexity), true

	case "PatientBill.nonFixedChargeEndDate":
		if e.complexity.PatientBill.NonFixedChargeEndDate == nil {
			break
		}

		return e.complexity.PatientBill.NonFixedChargeEndDate(childComplexity), true

	case "PatientBill.nonFixedChargeRecords":
		if e.complexity.PatientBill.NonFixedChargeRecords == nil {
			break
		}

		return e.complexity.PatientBill.NonFixedChargeRecords(childComplexity), true

	case "PatientBill.nonFixedChargeStartDate":
		if e.complexity.PatientBill.NonFixedChargeStartDate == nil {
			break
		}

		return e.complexity.PatientBill.NonFixedChargeStartDate(childComplexity), true

	case "PatientBill.note":
		if e.complexity.PatientBill.Note == nil {
			break
		}

		return e.complexity.PatientBill.Note(childComplexity), true

	case "PatientBill.patient":
		if e.complexity.PatientBill.Patient == nil {
			break
		}

		return e.complexity.PatientBill.Patient(childComplexity), true

	case "PatientBill.subsidies":
		if e.complexity.PatientBill.Subsidies == nil {
			break
		}

		return e.complexity.PatientBill.Subsidies(childComplexity), true

	case "PatientBill.transferRefundEndDate":
		if e.complexity.PatientBill.TransferRefundEndDate == nil {
			break
		}

		return e.complexity.PatientBill.TransferRefundEndDate(childComplexity), true

	case "PatientBill.transferRefundLeaves":
		if e.complexity.PatientBill.TransferRefundLeaves == nil {
			break
		}

		return e.complexity.PatientBill.TransferRefundLeaves(childComplexity), true

	case "PatientBill.transferRefundStartDate":
		if e.complexity.PatientBill.TransferRefundStartDate == nil {
			break
		}

		return e.complexity.PatientBill.TransferRefundStartDate(childComplexity), true

	case "PatientBill.user":
		if e.complexity.PatientBill.User == nil {
			break
		}

		return e.complexity.PatientBill.User(childComplexity), true

	case "PatientLatestDepositRecords.latestRecord":
		if e.complexity.PatientLatestDepositRecords.LatestRecord == nil {
			break
		}

		return e.complexity.PatientLatestDepositRecords.LatestRecord(childComplexity), true

	case "PatientLatestDepositRecords.latestUpdatedRecord":
		if e.complexity.PatientLatestDepositRecords.LatestUpdatedRecord == nil {
			break
		}

		return e.complexity.PatientLatestDepositRecords.LatestUpdatedRecord(childComplexity), true

	case "PatientLatestNonFixedChargeRecords.lastMonth":
		if e.complexity.PatientLatestNonFixedChargeRecords.LastMonth == nil {
			break
		}

		return e.complexity.PatientLatestNonFixedChargeRecords.LastMonth(childComplexity), true

	case "PatientLatestNonFixedChargeRecords.latestUpdatedRecord":
		if e.complexity.PatientLatestNonFixedChargeRecords.LatestUpdatedRecord == nil {
			break
		}

		return e.complexity.PatientLatestNonFixedChargeRecords.LatestUpdatedRecord(childComplexity), true

	case "PatientLatestNonFixedChargeRecords.thisMonth":
		if e.complexity.PatientLatestNonFixedChargeRecords.ThisMonth == nil {
			break
		}

		return e.complexity.PatientLatestNonFixedChargeRecords.ThisMonth(childComplexity), true

	case "PatientSort.bed":
		if e.complexity.PatientSort.Bed == nil {
			break
		}

		return e.complexity.PatientSort.Bed(childComplexity), true

	case "PatientSort.branch":
		if e.complexity.PatientSort.Branch == nil {
			break
		}

		return e.complexity.PatientSort.Branch(childComplexity), true

	case "PatientSort.detail1":
		if e.complexity.PatientSort.Detail1 == nil {
			break
		}

		return e.complexity.PatientSort.Detail1(childComplexity), true

	case "PatientSort.detail2":
		if e.complexity.PatientSort.Detail2 == nil {
			break
		}

		return e.complexity.PatientSort.Detail2(childComplexity), true

	case "PatientSort.firstName":
		if e.complexity.PatientSort.FirstName == nil {
			break
		}

		return e.complexity.PatientSort.FirstName(childComplexity), true

	case "PatientSort.id":
		if e.complexity.PatientSort.ID == nil {
			break
		}

		return e.complexity.PatientSort.ID(childComplexity), true

	case "PatientSort.idNumber":
		if e.complexity.PatientSort.IDNumber == nil {
			break
		}

		return e.complexity.PatientSort.IDNumber(childComplexity), true

	case "PatientSort.lastName":
		if e.complexity.PatientSort.LastName == nil {
			break
		}

		return e.complexity.PatientSort.LastName(childComplexity), true

	case "PatientSort.photoUrl":
		if e.complexity.PatientSort.PhotoURL == nil {
			break
		}

		return e.complexity.PatientSort.PhotoURL(childComplexity), true

	case "PatientSort.photoXPosition":
		if e.complexity.PatientSort.PhotoXPosition == nil {
			break
		}

		return e.complexity.PatientSort.PhotoXPosition(childComplexity), true

	case "PatientSort.photoYPosition":
		if e.complexity.PatientSort.PhotoYPosition == nil {
			break
		}

		return e.complexity.PatientSort.PhotoYPosition(childComplexity), true

	case "PatientSort.providerId":
		if e.complexity.PatientSort.ProviderID == nil {
			break
		}

		return e.complexity.PatientSort.ProviderID(childComplexity), true

	case "PatientSort.room":
		if e.complexity.PatientSort.Room == nil {
			break
		}

		return e.complexity.PatientSort.Room(childComplexity), true

	case "PatientSort.status":
		if e.complexity.PatientSort.Status == nil {
			break
		}

		return e.complexity.PatientSort.Status(childComplexity), true

	case "PatientSort.updatedAt":
		if e.complexity.PatientSort.UpdatedAt == nil {
			break
		}

		return e.complexity.PatientSort.UpdatedAt(childComplexity), true

	case "PatientSort.users":
		if e.complexity.PatientSort.Users == nil {
			break
		}

		return e.complexity.PatientSort.Users(childComplexity), true

	case "PayRecord.amountDue":
		if e.complexity.PayRecord.AmountDue == nil {
			break
		}

		return e.complexity.PayRecord.AmountDue(childComplexity), true

	case "PayRecord.createdAt":
		if e.complexity.PayRecord.CreatedAt == nil {
			break
		}

		return e.complexity.PayRecord.CreatedAt(childComplexity), true

	case "PayRecord.createdUser":
		if e.complexity.PayRecord.CreatedUser == nil {
			break
		}

		return e.complexity.PayRecord.CreatedUser(childComplexity), true

	case "PayRecord.id":
		if e.complexity.PayRecord.ID == nil {
			break
		}

		return e.complexity.PayRecord.ID(childComplexity), true

	case "PayRecord.invalidCaption":
		if e.complexity.PayRecord.InvalidCaption == nil {
			break
		}

		return e.complexity.PayRecord.InvalidCaption(childComplexity), true

	case "PayRecord.invalidDate":
		if e.complexity.PayRecord.InvalidDate == nil {
			break
		}

		return e.complexity.PayRecord.InvalidDate(childComplexity), true

	case "PayRecord.invalidUser":
		if e.complexity.PayRecord.InvalidUser == nil {
			break
		}

		return e.complexity.PayRecord.InvalidUser(childComplexity), true

	case "PayRecord.isInvalid":
		if e.complexity.PayRecord.IsInvalid == nil {
			break
		}

		return e.complexity.PayRecord.IsInvalid(childComplexity), true

	case "PayRecord.note":
		if e.complexity.PayRecord.Note == nil {
			break
		}

		return e.complexity.PayRecord.Note(childComplexity), true

	case "PayRecord.paidAmount":
		if e.complexity.PayRecord.PaidAmount == nil {
			break
		}

		return e.complexity.PayRecord.PaidAmount(childComplexity), true

	case "PayRecord.patient":
		if e.complexity.PayRecord.Patient == nil {
			break
		}

		return e.complexity.PayRecord.Patient(childComplexity), true

	case "PayRecord.payMonth":
		if e.complexity.PayRecord.PayMonth == nil {
			break
		}

		return e.complexity.PayRecord.PayMonth(childComplexity), true

	case "PayRecord.payRecordDetails":
		if e.complexity.PayRecord.PayRecordDetails == nil {
			break
		}

		return e.complexity.PayRecord.PayRecordDetails(childComplexity), true

	case "PayRecord.payYear":
		if e.complexity.PayRecord.PayYear == nil {
			break
		}

		return e.complexity.PayRecord.PayYear(childComplexity), true

	case "PayRecord.receiptNumber":
		if e.complexity.PayRecord.ReceiptNumber == nil {
			break
		}

		return e.complexity.PayRecord.ReceiptNumber(childComplexity), true

	case "PayRecord.taxType":
		if e.complexity.PayRecord.TaxType == nil {
			break
		}

		return e.complexity.PayRecord.TaxType(childComplexity), true

	case "PayRecord.user":
		if e.complexity.PayRecord.User == nil {
			break
		}

		return e.complexity.PayRecord.User(childComplexity), true

	case "PayRecordDetail.handler":
		if e.complexity.PayRecordDetail.Handler == nil {
			break
		}

		return e.complexity.PayRecordDetail.Handler(childComplexity), true

	case "PayRecordDetail.id":
		if e.complexity.PayRecordDetail.ID == nil {
			break
		}

		return e.complexity.PayRecordDetail.ID(childComplexity), true

	case "PayRecordDetail.method":
		if e.complexity.PayRecordDetail.Method == nil {
			break
		}

		return e.complexity.PayRecordDetail.Method(childComplexity), true

	case "PayRecordDetail.note":
		if e.complexity.PayRecordDetail.Note == nil {
			break
		}

		return e.complexity.PayRecordDetail.Note(childComplexity), true

	case "PayRecordDetail.payer":
		if e.complexity.PayRecordDetail.Payer == nil {
			break
		}

		return e.complexity.PayRecordDetail.Payer(childComplexity), true

	case "PayRecordDetail.price":
		if e.complexity.PayRecordDetail.Price == nil {
			break
		}

		return e.complexity.PayRecordDetail.Price(childComplexity), true

	case "PayRecordDetail.recordDate":
		if e.complexity.PayRecordDetail.RecordDate == nil {
			break
		}

		return e.complexity.PayRecordDetail.RecordDate(childComplexity), true

	case "PayRecordDetail.type":
		if e.complexity.PayRecordDetail.Type == nil {
			break
		}

		return e.complexity.PayRecordDetail.Type(childComplexity), true

	case "PayRecordDetail.user":
		if e.complexity.PayRecordDetail.User == nil {
			break
		}

		return e.complexity.PayRecordDetail.User(childComplexity), true

	case "Query.autoTextFields":
		if e.complexity.Query.AutoTextFields == nil {
			break
		}

		args, err := ec.field_Query_autoTextFields_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AutoTextFields(childComplexity, args["field"].(string)), true

	case "Query.basicChargeSettings":
		if e.complexity.Query.BasicChargeSettings == nil {
			break
		}

		args, err := ec.field_Query_basicChargeSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BasicChargeSettings(childComplexity, args["patientId"].(string)), true

	case "Query.depositRecord":
		if e.complexity.Query.DepositRecord == nil {
			break
		}

		args, err := ec.field_Query_depositRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepositRecord(childComplexity, args["id"].(string)), true

	case "Query.depositRecords":
		if e.complexity.Query.DepositRecords == nil {
			break
		}

		args, err := ec.field_Query_depositRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepositRecords(childComplexity, args["patientId"].(string)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.nonFixedChargeRecord":
		if e.complexity.Query.NonFixedChargeRecord == nil {
			break
		}

		args, err := ec.field_Query_nonFixedChargeRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NonFixedChargeRecord(childComplexity, args["id"].(string)), true

	case "Query.nonFixedChargeRecords":
		if e.complexity.Query.NonFixedChargeRecords == nil {
			break
		}

		args, err := ec.field_Query_nonFixedChargeRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NonFixedChargeRecords(childComplexity, args["patientId"].(string), args["startDate"].(time.Time), args["endDate"].(time.Time)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		return e.complexity.Query.Organization(childComplexity), true

	case "Query.organizationBasicChargeSetting":
		if e.complexity.Query.OrganizationBasicChargeSetting == nil {
			break
		}

		args, err := ec.field_Query_organizationBasicChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationBasicChargeSetting(childComplexity, args["id"].(string)), true

	case "Query.organizationBasicChargeSettings":
		if e.complexity.Query.OrganizationBasicChargeSettings == nil {
			break
		}

		return e.complexity.Query.OrganizationBasicChargeSettings(childComplexity), true

	case "Query.organizationNonFixedChargeSetting":
		if e.complexity.Query.OrganizationNonFixedChargeSetting == nil {
			break
		}

		args, err := ec.field_Query_organizationNonFixedChargeSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationNonFixedChargeSetting(childComplexity, args["id"].(string)), true

	case "Query.organizationNonFixedChargeSettings":
		if e.complexity.Query.OrganizationNonFixedChargeSettings == nil {
			break
		}

		return e.complexity.Query.OrganizationNonFixedChargeSettings(childComplexity), true

	case "Query.organizationReceipt":
		if e.complexity.Query.OrganizationReceipt == nil {
			break
		}

		return e.complexity.Query.OrganizationReceipt(childComplexity), true

	case "Query.organizationReceiptTemplateSetting":
		if e.complexity.Query.OrganizationReceiptTemplateSetting == nil {
			break
		}

		args, err := ec.field_Query_organizationReceiptTemplateSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationReceiptTemplateSetting(childComplexity, args["id"].(string)), true

	case "Query.organizationReceiptTemplateSettings":
		if e.complexity.Query.OrganizationReceiptTemplateSettings == nil {
			break
		}

		return e.complexity.Query.OrganizationReceiptTemplateSettings(childComplexity), true

	case "Query.patient":
		if e.complexity.Query.Patient == nil {
			break
		}

		args, err := ec.field_Query_patient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Patient(childComplexity, args["id"].(string)), true

	case "Query.patientBill":
		if e.complexity.Query.PatientBill == nil {
			break
		}

		args, err := ec.field_Query_patientBill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientBill(childComplexity, args["patientId"].(string), args["billYear"].(int), args["billMonth"].(int)), true

	case "Query.patientBillBasicCharge":
		if e.complexity.Query.PatientBillBasicCharge == nil {
			break
		}

		args, err := ec.field_Query_patientBillBasicCharge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientBillBasicCharge(childComplexity, args["basicChargeId"].(string)), true

	case "Query.patientBillSubsidy":
		if e.complexity.Query.PatientBillSubsidy == nil {
			break
		}

		args, err := ec.field_Query_patientBillSubsidy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientBillSubsidy(childComplexity, args["subsidyId"].(string)), true

	case "Query.patientBills":
		if e.complexity.Query.PatientBills == nil {
			break
		}

		args, err := ec.field_Query_patientBills_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientBills(childComplexity, args["billDate"].(time.Time)), true

	case "Query.patientLatestDepositRecords":
		if e.complexity.Query.PatientLatestDepositRecords == nil {
			break
		}

		return e.complexity.Query.PatientLatestDepositRecords(childComplexity), true

	case "Query.patientLatestFixedChargeRecords":
		if e.complexity.Query.PatientLatestFixedChargeRecords == nil {
			break
		}

		return e.complexity.Query.PatientLatestFixedChargeRecords(childComplexity), true

	case "Query.patientLatestNonFixedChargeRecords":
		if e.complexity.Query.PatientLatestNonFixedChargeRecords == nil {
			break
		}

		return e.complexity.Query.PatientLatestNonFixedChargeRecords(childComplexity), true

	case "Query.patients":
		if e.complexity.Query.Patients == nil {
			break
		}

		return e.complexity.Query.Patients(childComplexity), true

	case "Query.payRecord":
		if e.complexity.Query.PayRecord == nil {
			break
		}

		args, err := ec.field_Query_payRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PayRecord(childComplexity, args["id"].(string)), true

	case "Query.payRecordDetail":
		if e.complexity.Query.PayRecordDetail == nil {
			break
		}

		args, err := ec.field_Query_payRecordDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PayRecordDetail(childComplexity, args["id"].(string)), true

	case "Query.payRecords":
		if e.complexity.Query.PayRecords == nil {
			break
		}

		args, err := ec.field_Query_payRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PayRecords(childComplexity, args["payDate"].(time.Time)), true

	case "Query.printDepositRecord":
		if e.complexity.Query.PrintDepositRecord == nil {
			break
		}

		args, err := ec.field_Query_printDepositRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintDepositRecord(childComplexity, args["id"].(string)), true

	case "Query.printPatientBill":
		if e.complexity.Query.PrintPatientBill == nil {
			break
		}

		args, err := ec.field_Query_printPatientBill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPatientBill(childComplexity, args["id"].(string)), true

	case "Query.printPatientBillGeneralTable":
		if e.complexity.Query.PrintPatientBillGeneralTable == nil {
			break
		}

		args, err := ec.field_Query_printPatientBillGeneralTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPatientBillGeneralTable(childComplexity, args["billDate"].(time.Time)), true

	case "Query.printPayRecordDetail":
		if e.complexity.Query.PrintPayRecordDetail == nil {
			break
		}

		args, err := ec.field_Query_printPayRecordDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPayRecordDetail(childComplexity, args["id"].(string)), true

	case "Query.printPayRecordGeneralTable":
		if e.complexity.Query.PrintPayRecordGeneralTable == nil {
			break
		}

		args, err := ec.field_Query_printPayRecordGeneralTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPayRecordGeneralTable(childComplexity, args["billDate"].(time.Time)), true

	case "Query.printPayRecordPart":
		if e.complexity.Query.PrintPayRecordPart == nil {
			break
		}

		args, err := ec.field_Query_printPayRecordPart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPayRecordPart(childComplexity, args["id"].(string)), true

	case "Query.printPayRecordPartByTaxType":
		if e.complexity.Query.PrintPayRecordPartByTaxType == nil {
			break
		}

		args, err := ec.field_Query_printPayRecordPartByTaxType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPayRecordPartByTaxType(childComplexity, args["id"].(string)), true

	case "Query.printPayRecordsPartByTaxType":
		if e.complexity.Query.PrintPayRecordsPartByTaxType == nil {
			break
		}

		args, err := ec.field_Query_printPayRecordsPartByTaxType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PrintPayRecordsPartByTaxType(childComplexity, args["ids"].([]string)), true

	case "Query.subsidiesSetting":
		if e.complexity.Query.SubsidiesSetting == nil {
			break
		}

		args, err := ec.field_Query_subsidiesSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubsidiesSetting(childComplexity, args["patientId"].(string)), true

	case "Query.subsidySetting":
		if e.complexity.Query.SubsidySetting == nil {
			break
		}

		args, err := ec.field_Query_subsidySetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubsidySetting(childComplexity, args["id"].(string)), true

	case "Query.transferRefundLeave":
		if e.complexity.Query.TransferRefundLeave == nil {
			break
		}

		args, err := ec.field_Query_transferRefundLeave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TransferRefundLeave(childComplexity, args["id"].(string)), true

	case "Query.transferRefundLeaves":
		if e.complexity.Query.TransferRefundLeaves == nil {
			break
		}

		args, err := ec.field_Query_transferRefundLeaves_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TransferRefundLeaves(childComplexity, args["patientId"].(string), args["startDate"].(time.Time), args["endDate"].(time.Time)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "Subsidy.createdAt":
		if e.complexity.Subsidy.CreatedAt == nil {
			break
		}

		return e.complexity.Subsidy.CreatedAt(childComplexity), true

	case "Subsidy.endDate":
		if e.complexity.Subsidy.EndDate == nil {
			break
		}

		return e.complexity.Subsidy.EndDate(childComplexity), true

	case "Subsidy.id":
		if e.complexity.Subsidy.ID == nil {
			break
		}

		return e.complexity.Subsidy.ID(childComplexity), true

	case "Subsidy.idNumber":
		if e.complexity.Subsidy.IdNumber == nil {
			break
		}

		return e.complexity.Subsidy.IdNumber(childComplexity), true

	case "Subsidy.itemName":
		if e.complexity.Subsidy.ItemName == nil {
			break
		}

		return e.complexity.Subsidy.ItemName(childComplexity), true

	case "Subsidy.note":
		if e.complexity.Subsidy.Note == nil {
			break
		}

		return e.complexity.Subsidy.Note(childComplexity), true

	case "Subsidy.patient":
		if e.complexity.Subsidy.Patient == nil {
			break
		}

		return e.complexity.Subsidy.Patient(childComplexity), true

	case "Subsidy.price":
		if e.complexity.Subsidy.Price == nil {
			break
		}

		return e.complexity.Subsidy.Price(childComplexity), true

	case "Subsidy.receiptDate":
		if e.complexity.Subsidy.ReceiptDate == nil {
			break
		}

		return e.complexity.Subsidy.ReceiptDate(childComplexity), true

	case "Subsidy.receiptStatus":
		if e.complexity.Subsidy.ReceiptStatus == nil {
			break
		}

		return e.complexity.Subsidy.ReceiptStatus(childComplexity), true

	case "Subsidy.sortIndex":
		if e.complexity.Subsidy.SortIndex == nil {
			break
		}

		return e.complexity.Subsidy.SortIndex(childComplexity), true

	case "Subsidy.startDate":
		if e.complexity.Subsidy.StartDate == nil {
			break
		}

		return e.complexity.Subsidy.StartDate(childComplexity), true

	case "Subsidy.type":
		if e.complexity.Subsidy.Type == nil {
			break
		}

		return e.complexity.Subsidy.Type(childComplexity), true

	case "Subsidy.unit":
		if e.complexity.Subsidy.Unit == nil {
			break
		}

		return e.complexity.Subsidy.Unit(childComplexity), true

	case "Subsidy.user":
		if e.complexity.Subsidy.User == nil {
			break
		}

		return e.complexity.Subsidy.User(childComplexity), true

	case "SubsidySetting.id":
		if e.complexity.SubsidySetting.ID == nil {
			break
		}

		return e.complexity.SubsidySetting.ID(childComplexity), true

	case "SubsidySetting.idNumber":
		if e.complexity.SubsidySetting.IdNumber == nil {
			break
		}

		return e.complexity.SubsidySetting.IdNumber(childComplexity), true

	case "SubsidySetting.itemName":
		if e.complexity.SubsidySetting.ItemName == nil {
			break
		}

		return e.complexity.SubsidySetting.ItemName(childComplexity), true

	case "SubsidySetting.note":
		if e.complexity.SubsidySetting.Note == nil {
			break
		}

		return e.complexity.SubsidySetting.Note(childComplexity), true

	case "SubsidySetting.price":
		if e.complexity.SubsidySetting.Price == nil {
			break
		}

		return e.complexity.SubsidySetting.Price(childComplexity), true

	case "SubsidySetting.sortIndex":
		if e.complexity.SubsidySetting.SortIndex == nil {
			break
		}

		return e.complexity.SubsidySetting.SortIndex(childComplexity), true

	case "SubsidySetting.type":
		if e.complexity.SubsidySetting.Type == nil {
			break
		}

		return e.complexity.SubsidySetting.Type(childComplexity), true

	case "SubsidySetting.unit":
		if e.complexity.SubsidySetting.Unit == nil {
			break
		}

		return e.complexity.SubsidySetting.Unit(childComplexity), true

	case "TransferRefundLeave.createdAt":
		if e.complexity.TransferRefundLeave.CreatedAt == nil {
			break
		}

		return e.complexity.TransferRefundLeave.CreatedAt(childComplexity), true

	case "TransferRefundLeave.endDate":
		if e.complexity.TransferRefundLeave.EndDate == nil {
			break
		}

		return e.complexity.TransferRefundLeave.EndDate(childComplexity), true

	case "TransferRefundLeave.id":
		if e.complexity.TransferRefundLeave.ID == nil {
			break
		}

		return e.complexity.TransferRefundLeave.ID(childComplexity), true

	case "TransferRefundLeave.isReserveBed":
		if e.complexity.TransferRefundLeave.IsReserveBed == nil {
			break
		}

		return e.complexity.TransferRefundLeave.IsReserveBed(childComplexity), true

	case "TransferRefundLeave.items":
		if e.complexity.TransferRefundLeave.Items == nil {
			break
		}

		return e.complexity.TransferRefundLeave.Items(childComplexity), true

	case "TransferRefundLeave.note":
		if e.complexity.TransferRefundLeave.Note == nil {
			break
		}

		return e.complexity.TransferRefundLeave.Note(childComplexity), true

	case "TransferRefundLeave.reason":
		if e.complexity.TransferRefundLeave.Reason == nil {
			break
		}

		return e.complexity.TransferRefundLeave.Reason(childComplexity), true

	case "TransferRefundLeave.receiptDate":
		if e.complexity.TransferRefundLeave.ReceiptDate == nil {
			break
		}

		return e.complexity.TransferRefundLeave.ReceiptDate(childComplexity), true

	case "TransferRefundLeave.receiptStatus":
		if e.complexity.TransferRefundLeave.ReceiptStatus == nil {
			break
		}

		return e.complexity.TransferRefundLeave.ReceiptStatus(childComplexity), true

	case "TransferRefundLeave.startDate":
		if e.complexity.TransferRefundLeave.StartDate == nil {
			break
		}

		return e.complexity.TransferRefundLeave.StartDate(childComplexity), true

	case "TransferRefundLeave.user":
		if e.complexity.TransferRefundLeave.User == nil {
			break
		}

		return e.complexity.TransferRefundLeave.User(childComplexity), true

	case "UploadFileResponse.fullName":
		if e.complexity.UploadFileResponse.FullName == nil {
			break
		}

		return e.complexity.UploadFileResponse.FullName(childComplexity), true

	case "UploadFileResponse.publicLink":
		if e.complexity.UploadFileResponse.PublicLink == nil {
			break
		}

		return e.complexity.UploadFileResponse.PublicLink(childComplexity), true

	case "UploadFileResponse.signedUrl":
		if e.complexity.UploadFileResponse.SignedURL == nil {
			break
		}

		return e.complexity.UploadFileResponse.SignedURL(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.idNumber":
		if e.complexity.User.IdNumber == nil {
			break
		}

		return e.complexity.User.IdNumber(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.preference":
		if e.complexity.User.Preference == nil {
			break
		}

		return e.complexity.User.Preference(childComplexity), true

	case "User.providerId":
		if e.complexity.User.ProviderId == nil {
			break
		}

		return e.complexity.User.ProviderId(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserPreference.branch":
		if e.complexity.UserPreference.Branch == nil {
			break
		}

		return e.complexity.UserPreference.Branch(childComplexity), true

	case "UserPreference.era":
		if e.complexity.UserPreference.Era == nil {
			break
		}

		return e.complexity.UserPreference.Era(childComplexity), true

	case "UserPreference.locale":
		if e.complexity.UserPreference.Locale == nil {
			break
		}

		return e.complexity.UserPreference.Locale(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "internal/gql/schemas/autoTextFiled.graphql", Input: `# Types
type AutoTextField {
  id: ID!
  moduleName: String!
  itemName: String!
  text: String!
}

# input
input AutoTextFieldInput {
  field: String!
  value: String!
}

# Define query here
extend type Query {
  autoTextFields(field: String!): [AutoTextField!]!
}

# Define mutation here
extend type Mutation {
  createAutoTextField(input: AutoTextFieldInput!): Boolean!
  deleteAutoTextField(input: AutoTextFieldInput!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/basicCharge.graphql", Input: `type BasicCharge {
  id: ID!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
  startDate: Time!
  endDate: Time!
  note: String
  receiptStatus: String
  receiptDate: Time
  sortIndex: Int
  patient: Patient!
  user: User!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/basicChargeSetting.graphql", Input: `# Types
type BasicChargeSetting {
  id: ID!
  sortIndex: Int
  updatedAt: Time
  patient: Patient
  organizationBasicChargeSetting: OrganizationBasicChargeSetting!
}

type AllChargeSetting {
  updatedAt: Time
  patient: Patient
  detail1: String
}

# input
input BasicChargeInput {
  organizationBasicChargeId: [ID!]!
  patientId: String!
}

# Define query here
extend type Query {
  basicChargeSettings(patientId: ID!): [BasicChargeSetting!]!
}

# Define mutation here
extend type Mutation {
  createBasicCharge(input: BasicChargeInput): Boolean!
  updateBasicCharge(input: BasicChargeInput): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/depositRecord.graphql", Input: `# Types
type DepositRecord {
  id: ID!
  idNumber: String
  updatedAt: Time
  date: Time
  type: String
  price: Int
  drawee: String
  note: String
  invalid: Boolean!
  patient: Patient
  user: User!
}

type PatientLatestDepositRecords {
  latestRecord: [DepositRecord]
  latestUpdatedRecord: [DepositRecord]
}

# input
input DepositRecordInput {
  date: Time!
  type: String!
  price: Int!
  drawee: String
  note: String
  patientId: String!
}

input DepositRecordUpdateInput {
  note: String
}

# Define query here
extend type Query {
  depositRecord(id: ID!): DepositRecord!
  depositRecords(patientId: ID!): [DepositRecord!]!
  patientLatestDepositRecords: PatientLatestDepositRecords!
  printDepositRecord(id: ID!): String
}

# Define mutation here
extend type Mutation {
  createDepositRecord(input: DepositRecordInput!): ID!
  updateDepositRecord(id: ID!, input: DepositRecordUpdateInput!): Boolean!
  invalidDepositRecord(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/file.graphql", Input: `# Types
type File {
  id: ID!
  fileName: String!
  url: String!
}

type UploadFileResponse {
  signedUrl: String!
  publicLink: String!
  fullName: String!
}

# Define mutation here
extend type Mutation {
  createFile(fileName: String!): UploadFileResponse!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/fixedChargeRecord.graphql", Input: `## 這邊是為了給住民列表使用的
## 其實是把固定月費(basicChargeSetting)跟補助款(subsidy)的資料捏再一起

# Types
type FixedChargeRecord {
  updatedAt: Time
  items: [String!]
  patient: Patient! 
}


# Define query here
extend type Query {
  patientLatestFixedChargeRecords: [FixedChargeRecord!]!
}


`, BuiltIn: false},
	{Name: "internal/gql/schemas/nonFixedChargeRecord.graphql", Input: `# Types
type NonFixedChargeRecord {
  id: ID!
  createdAt: Time!
  updatedAt: Time
  nonFixedChargeDate: Time!
  itemCategory: String!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  quantity: Int!
  subtotal: Int!
  note: String
  taxType: String!
  patient: Patient!
  user: User!
  receiptStatus: String
  receiptDate: Time
}

type PatientLatestNonFixedChargeRecords {
  thisMonth: [NonFixedChargeRecord!]!
  lastMonth: [NonFixedChargeRecord!]!
  latestUpdatedRecord: [NonFixedChargeRecord!]!
}

# input
input NonFixedChargeRecordInput {
  nonFixedChargeDate: Time!
  itemCategory: String!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  quantity: Int!
  subtotal: Int!
  note: String
  taxType: String!
}

# Define query here
extend type Query {
  nonFixedChargeRecord(id: ID!): NonFixedChargeRecord!
  nonFixedChargeRecords(
    patientId: ID!
    startDate: Time!
    endDate: Time!
  ): [NonFixedChargeRecord!]!
  patientLatestNonFixedChargeRecords: PatientLatestNonFixedChargeRecords!
}

# Define mutation here
extend type Mutation {
  createNonFixedChargeRecord(
    patientId: ID!
    input: [NonFixedChargeRecordInput!]!
  ): Boolean!
  updateNonFixedChargeRecord(
    id: ID!
    input: NonFixedChargeRecordInput
  ): Boolean!
  deleteNonFixedChargeRecord(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/organization.graphql", Input: `enum PrivacyType {
  "顯示"
  mask
  "不顯示"
  unmask
}

# Types
type Organization {
  id: ID!
  name: String!
  addressCity: String
  addressDistrict: String
  address: String
  phone: String
  fax: String
  owner: String
  email: String
  taxIdNumber: String
  branchs: PgStringArray
  remittanceBank: String
  remittanceIdNumber: String
  remittanceUserName: String
  establishmentNumber: String
  fixedChargeStartMonth: String!
  fixedChargeStartDate: Int!
  fixedChargeEndMonth: String!
  fixedChargeEndDate: Int!
  nonFixedChargeStartMonth: String!
  nonFixedChargeStartDate: Int!
  nonFixedChargeEndMonth: String!
  nonFixedChargeEndDate: Int!
  transferRefundStartMonth: String!
  transferRefundStartDate: Int!
  transferRefundEndMonth: String!
  transferRefundEndDate: Int!
  privacy: PrivacyType!
}

# input
input OrganizationSettingInput {
  name: String!
  addressCity: String
  addressDistrict: String
  address: String
  phone: String
  fax: String
  owner: String
  email: String
  taxIdNumber: String
  remittanceBank: String
  remittanceIdNumber: String
  remittanceUserName: String
  establishmentNumber: String
}

input OrganizationBillDateRangeSettingInput {
  fixedChargeStartMonth: String!
  fixedChargeStartDate: Int!
  fixedChargeEndMonth: String!
  fixedChargeEndDate: Int!
  nonFixedChargeStartMonth: String!
  nonFixedChargeStartDate: Int!
  nonFixedChargeEndMonth: String!
  nonFixedChargeEndDate: Int!
  transferRefundStartMonth: String!
  transferRefundStartDate: Int!
  transferRefundEndMonth: String!
  transferRefundEndDate: Int!
}

input OrganizationPrivacyInput {
  privacy: PrivacyType!
}

# Define query here
extend type Query {
  organization: Organization!
}

# Define mutations here
extend type Mutation {
  updateOrganization(input: OrganizationSettingInput): Boolean!
  updateOrganizationPrivacy(input: OrganizationPrivacyInput): Boolean!
  updateOrganizationBillDateRangeSetting(
    input: OrganizationBillDateRangeSettingInput
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/organizationBasicChargeSetting.graphql", Input: `# Types
type OrganizationBasicChargeSetting {
  id: ID!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
}

# input
input OrganizationBasicChargeSettingInput {
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
}

# Define query here
extend type Query {
  organizationBasicChargeSetting(id: ID!): OrganizationBasicChargeSetting!
  organizationBasicChargeSettings: [OrganizationBasicChargeSetting!]!
}

# Define mutation here
extend type Mutation {
  createOrganizationBasicChargeSetting(
    input: OrganizationBasicChargeSettingInput
  ): Boolean!
  updateOrganizationBasicChargeSetting(
    id: ID!
    input: OrganizationBasicChargeSettingInput
  ): Boolean!
  deleteOrganizationBasicChargeSetting(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/organizationNonFixedChargeSetting.graphql", Input: `# Types
type OrganizationNonFixedChargeSetting {
  id: ID!
  itemCategory: String!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
}

# input
input OrganizationNonFixedChargeSettingInput {
  itemCategory: String!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
}

# Define query here
extend type Query {
  organizationNonFixedChargeSetting(id: ID!): OrganizationNonFixedChargeSetting!
  organizationNonFixedChargeSettings: [OrganizationNonFixedChargeSetting!]!
}

# Define mutation here
extend type Mutation {
  createOrganizationNonFixedChargeSetting(
    input: OrganizationNonFixedChargeSettingInput
  ): Boolean!
  updateOrganizationNonFixedChargeSetting(
    id: ID!
    input: OrganizationNonFixedChargeSettingInput
  ): Boolean!
  deleteOrganizationNonFixedChargeSetting(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/organizationReceipt.graphql", Input: `enum YearType {
  "西元年"
  Christian
  "民國年"
  Republican
}

enum MonthType {
  "月份前面加0"
  MM
  "月份前面不加0"
  M
}

# Types
type OrganizationReceipt {
  id: ID!
  firstText: String
  year: YearType
  yearText: String
  month: MonthType
  monthText: String
  lastText: String
  isResetInNextCycle: Boolean
}

# input
input OrganizationReceiptInput {
  firstText: String
  year: YearType
  yearText: String
  month: MonthType
  monthText: String
  lastText: String
  isResetInNextCycle: Boolean
}

# Define mutations here
extend type Mutation {
  updateOrganizationReceipt(input: OrganizationReceiptInput): Boolean!
}

# Define queries here
extend type Query {
  organizationReceipt: OrganizationReceipt
}

`, BuiltIn: false},
	{Name: "internal/gql/schemas/organizationReceiptTemplateSetting.graphql", Input: `# Types
type OrganizationReceiptTemplateSetting {
  id: ID!
  name: String!
  taxTypes: PgStringArray!
  organizationPicture: String
  titleName: String!
  patientInfo: PgStringArray!
  priceShowType: String!
  organizationInfoOne: PgStringArray!  
  organizationInfoTwo: PgStringArray! 
  noteText: String
  sealOneName: String
  sealOnePicture: String
  sealTwoName: String
  sealTwoPicture: String
  sealThreeName: String
  sealThreePicture: String
  sealFourName: String
  sealFourPicture: String
  partOneName: String!
  partTwoName: String!
}

input OrganizationReceiptTemplateSettingInput {
  name: String!
  taxTypes: [String!]!
  organizationPicture: String
  titleName: String!
  patientInfo:[String!]!
  organizationInfoOne:[String!]!
  priceShowType: String!  
  organizationInfoTwo:[String!]!  
  noteText: String!
  sealOneName: String!
  sealOnePicture: String
  sealTwoName: String!
  sealTwoPicture: String
  sealThreeName: String!
  sealThreePicture: String
  sealFourName: String!
  sealFourPicture: String
  partOneName: String!
  partTwoName: String!
}

# Define query here
extend type Query {
  organizationReceiptTemplateSetting(
    id: ID!
  ): OrganizationReceiptTemplateSetting
  organizationReceiptTemplateSettings: [OrganizationReceiptTemplateSetting!]!
}

# Define mutation here
extend type Mutation {
  createOrganizationReceiptTemplateSetting(
    input: OrganizationReceiptTemplateSettingInput!
  ): Boolean!
  updateOrganizationReceiptTemplateSetting(
    id: ID!
    input: OrganizationReceiptTemplateSettingInput!
  ): Boolean!
  deleteOrganizationReceiptTemplateSetting(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/patient.graphql", Input: `scalar Time
scalar PgStringArray
scalar TransferRefundItemsJsonType
# Types

type Patient {
  id: ID!
  firstName: String
  lastName: String
  idNumber: String!
  photoUrl: String
  photoXPosition: Int
  photoYPosition: Int
  providerId: String!
  status: String!
  branch: String
  room: String
  bed: String
  users: [User]
}

type Detail {
  date: Time
  text1: String
  text2: String
  text3: String
}

type PatientSort {
  id: ID!
  firstName: String
  lastName: String
  updatedAt: Time
  idNumber: String!
  photoUrl: String
  photoXPosition: Int
  photoYPosition: Int
  providerId: String!
  status: String!
  branch: String
  room: String
  bed: String
  detail1: Detail
  detail2: Detail
  users: [User]
}


# Define queries here
type Query {
  patient(id: ID!): Patient!
  patients: [Patient!]!
}

directive @isAuthenticated on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "internal/gql/schemas/patientBill.graphql", Input: `# Types
type PatientBill {
  id: ID!
  createdAt: Time
  amountReceived: Int
  note: String
  fixedChargeStartDate: Time
  fixedChargeEndDate: Time
  transferRefundStartDate: Time
  transferRefundEndDate: Time
  nonFixedChargeStartDate: Time
  nonFixedChargeEndDate: Time
  billYear: Int
  billMonth: Int
  patient: Patient
  editNoteDate: Time
  editNoteUser: User
  user: User!
  basicCharges: [BasicCharge]
  subsidies: [Subsidy]
  nonFixedChargeRecords: [NonFixedChargeRecord]
  transferRefundLeaves: [TransferRefundLeave]
}

# input
input PatientBillInput {
  patientId: String!
  billDate: Time!
}

input PatientBillsInput {
  patientId: [String!]!
  billDate: Time!
}

input UpdatePatientBillNoteInput {
  id: ID!
  note: String
}

input UpdatePatientBillChargeDatesInput{
	transferRefundStartDate: Time
	transferRefundEndDate: Time
	nonFixedChargeStartDate: Time
	nonFixedChargeEndDate: Time
}

# Define query here
extend type Query {
  patientBill(patientId: ID!, billYear: Int!, billMonth: Int!): PatientBill
  patientBills(billDate: Time!): [PatientBill!]!
  printPatientBill(id: ID!): String!
  printPatientBillGeneralTable(billDate: Time!): String!
}

# Define mutation here
extend type Mutation {
  createPatientBill(input: PatientBillInput): ID!
  createPatientBills(input: PatientBillsInput): [PatientBill!]!
  updatePatientBillNote(input: UpdatePatientBillNoteInput): Boolean!
  updatePatientBillChargeDates(id: ID!,input:UpdatePatientBillChargeDatesInput!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/patientBillBasicCharge.graphql", Input: `# type PatientBillBasicCharge {
#   id: ID!
#   itemName: String
#   type: String
#   unit: String
#   price: Int
#   note: String
#   taxType: String
#   startDate: Time
#   endDate: Time
#   userName: String!
# }

# input固定費用
input CreatePatientBillBasicChargeInput {
  id: ID!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
  startDate: Time!
  endDate: Time!
  note: String
}

input UpdatePatientBillBasicChargeInput {
  basicChargeId: ID!
  itemName: String!
  type: String!
  unit: String!
  price: Int!
  taxType: String!
  startDate: Time!
  endDate: Time!
  note: String
}

# Define query here
extend type Query {
  patientBillBasicCharge(basicChargeId: ID!): BasicCharge
}

# Define mutation here
extend type Mutation {
  addPatientBillBasicCharge(input: CreatePatientBillBasicChargeInput): Boolean!
  updatePatientBillBasicCharge(
    input: UpdatePatientBillBasicChargeInput
  ): Boolean!
  deletePatientBillBasicCharge(basicChargeId: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/patientBillSubsidy.graphql", Input: `# # Types
# type PatientBillSubsidy {
#   id: ID!
#   itemName: String
#   type: String
#   price: Int
#   unit: String
#   idNumber: String
#   note: String
#   startDate: Time
#   endDate: Time
#   userName: String!
# }

# input補助款
input CreatePatientBillSubsidyInput {
  id: ID!
  itemName: String!
  type: String!
  price: Int!
  unit: String
  idNumber: String
  startDate: Time!
  endDate: Time!
  note: String
}

input UpdatePatientBillSubsidyInput {
  subsidyId: ID!
  itemName: String
  type: String!
  unit: String!
  price: Int!
  idNumber: String
  startDate: Time!
  endDate: Time!
  note: String
}

# Define query here
extend type Query {
  patientBillSubsidy(subsidyId: ID!): Subsidy
}

# Define mutation here
extend type Mutation {
  addPatientBillSubsidy(input: CreatePatientBillSubsidyInput): Boolean!
  updatePatientBillSubsidy(input: UpdatePatientBillSubsidyInput): Boolean!
  deletePatientBillSubsidy(subsidyId: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/payRecord.graphql", Input: `enum OpenMethodType {
  "所有帳單費用結算"
  allTax
  "分稅別結算"
  selectTax
}

enum TaxType {
  "印花稅"
  stampTax
  "營業稅"
  businessTax
  "免稅"
  noTax
  "其他"
  other
}

# Types
type PayRecord {
  id: ID!
  createdAt: Time!
  # payDate: Time!
  receiptNumber: String!
  taxType: String!
  amountDue: Int!
  paidAmount: Int!
  note: String
  payYear:Int!
  payMonth:Int!
  isInvalid: Boolean!
  invalidDate: Time
  invalidCaption: String
  patient: Patient!
  user: User!
  createdUser: User!
  invalidUser: User
  payRecordDetails: [PayRecordDetail]
}

# input
input PayRecordInput {
  payDate: Time!
  patientsId: [ID!]
  openMethod: OpenMethodType!
  taxTypes: [TaxType]
}

input InvalidPayRecordInput {
  invalidDate: Time!
  invalidCaption: String
}

# Define query here
extend type Query {
  payRecords(payDate: Time!): [PayRecord!]!
  payRecord(id: ID!): PayRecord!
  printPayRecordDetail(id: ID!): String!
  printPayRecordPart(id: ID!): String!
  printPayRecordPartByTaxType(id: ID!): String!
  printPayRecordsPartByTaxType(ids: [ID!]!): String!
  printPayRecordGeneralTable(billDate: Time!): String!
}

# Define mutation here
extend type Mutation {
  createPayRecords(input: PayRecordInput!): Boolean!
  invalidPayRecord(id: ID!, input: InvalidPayRecordInput!): Boolean!
  cancelInvalidPayRecord(id: ID!): Boolean!
  updatePayRecorNote(id: ID!, note: String!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/payRecordDetail.graphql", Input: `enum PayRecordDetailType {
  "收費"
  charge
  "退費"
  refund
}

# Types
type PayRecordDetail {
  id: ID!
  recordDate: Time!
  type: PayRecordDetailType!
  price: Int!
  method: String!
  payer: String
  handler: String
  note: String
  user: User!
}

# input
input PayRecordDetailInput {
  recordDate: Time!
  type: PayRecordDetailType!
  price: Int!
  method: String!
  payer: String
  handler: String
  note: String
}

# Define query here
extend type Query {
  # payRecordDetails(payDate: Time!): [PayRecord!]!
  payRecordDetail(id: ID!): PayRecordDetail!
}

# Define mutation here
extend type Mutation {
  createPayRecordDetail(
    payRecrodId: ID!
    input: PayRecordDetailInput!
  ): Boolean!
  updatePayRecordDetail(id: ID!, input: PayRecordDetailInput!): Boolean!
  deletePayRecordDetail(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/subsidy.graphql", Input: `type Subsidy {
  id: ID!
  createdAt: Time!
  itemName: String!
  type: String!
  price: Int!
  unit: String
  idNumber:String
  note: String
  sortIndex: Int
  startDate: Time!
  endDate: Time!
  receiptStatus: String
  receiptDate: Time
  patient: Patient!
  user: User!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/subsidySetting.graphql", Input: `# Types
type SubsidySetting {
  id: ID!
  itemName: String!
  type: String!
  price: Int!
  unit: String
  idNumber: String
  sortIndex: Int
  note: String
}

# input
input SubsidySettingInput {
  itemName: String!
  type: String!
  price: Int!
  unit: String
  idNumber: String
  note: String
}

# input
input SubsidySettingUpdateInput {
  id: ID
  itemName: String!
  type: String!
  price: Int!
  unit: String
  idNumber: String
  note: String
}

# Define query here
extend type Query {
  subsidiesSetting(patientId: ID!): [SubsidySetting!]!
  subsidySetting(id: ID!): SubsidySetting!
}

# Define mutation here
extend type Mutation {
  createSubsidiesSetting(patientId: ID!, input: [SubsidySettingInput!]!): Boolean!
  updateSubsidiesSetting(
    patientId: ID!
    input: [SubsidySettingUpdateInput!]!
    needDeleteId: [ID!]!
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/transferRefundLeave.graphql", Input: `# Types
type TransferRefundLeave {
  id: ID!
  createdAt: Time!
  startDate: Time!
  endDate: Time!
  reason: String!
  isReserveBed: String!
  note: String
  items: TransferRefundItemsJsonType
  receiptStatus: String
  receiptDate: Time
  user: User!
}

# input
input TransferRefundLeaveItem {
  itemName: String!
  type: String!
  price: Int!
}

input TransferRefundLeaveInput {
  startDate: Time!
  endDate: Time!
  reason: String!
  isReserveBed: String!
  note: String
  items: [TransferRefundLeaveItem!]!
}

# Define query here
extend type Query {
  transferRefundLeave(id: ID!): TransferRefundLeave!
  transferRefundLeaves(
    patientId: ID!
    startDate: Time!
    endDate: Time!
  ): [TransferRefundLeave!]!
}

# Define mutation here
extend type Mutation {
  createTransferRefundLeave(
    patientId: ID!
    input: TransferRefundLeaveInput!
  ): Boolean!
  updateTransferRefundLeave(id: ID!, input: TransferRefundLeaveInput!): Boolean!
  deleteTransferRefundLeave(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "internal/gql/schemas/user.graphql", Input: `enum EraType {
  "西元年"
  Christian
  "民國年"
  Republican
}

# Types
type UserPreference {
  branch: String
  locale: String
  era: EraType
}

type User {
  id: ID!
  username: String
  firstName: String
  lastName: String
  displayName: String
  idNumber: String
  preference: UserPreference
  # providerToken: JsonType
  providerId: String!
}

# Define mutations here
extend type Mutation {
  # login(input: UserInput): String!
  logout: Boolean!
}

# Define query here
extend type Query {
  me: User!
  user(id: ID!): User!
  users: [User!]!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addPatientBillBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CreatePatientBillBasicChargeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreatePatientBillBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐCreatePatientBillBasicChargeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPatientBillSubsidy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CreatePatientBillSubsidyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreatePatientBillSubsidyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐCreatePatientBillSubsidyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelInvalidPayRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAutoTextField_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.AutoTextFieldInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAutoTextFieldInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐAutoTextFieldInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.BasicChargeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐBasicChargeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDepositRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.DepositRecordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDepositRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDepositRecordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["fileName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fileName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNonFixedChargeRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 []*gqlmodels.NonFixedChargeRecordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNonFixedChargeRecordInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganizationBasicChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationBasicChargeSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationBasicChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationBasicChargeSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganizationNonFixedChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationNonFixedChargeSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationNonFixedChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationNonFixedChargeSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganizationReceiptTemplateSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.OrganizationReceiptTemplateSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationReceiptTemplateSettingInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationReceiptTemplateSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPatientBill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.PatientBillInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOPatientBillInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientBillInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPatientBills_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.PatientBillsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOPatientBillsInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientBillsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPayRecordDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["payRecrodId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payRecrodId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payRecrodId"] = arg0
	var arg1 gqlmodels.PayRecordDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPayRecordDetailInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createPayRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.PayRecordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPayRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSubsidiesSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 []*gqlmodels.SubsidySettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSubsidySettingInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createTransferRefundLeave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 gqlmodels.TransferRefundLeaveInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNTransferRefundLeaveInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAutoTextField_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.AutoTextFieldInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAutoTextFieldInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐAutoTextFieldInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNonFixedChargeRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganizationBasicChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganizationNonFixedChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganizationReceiptTemplateSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePatientBillBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["basicChargeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basicChargeId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["basicChargeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePatientBillSubsidy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subsidyId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subsidyId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subsidyId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePayRecordDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTransferRefundLeave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invalidDepositRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invalidPayRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.InvalidPayRecordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNInvalidPayRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐInvalidPayRecordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.BasicChargeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐBasicChargeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDepositRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.DepositRecordUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNDepositRecordUpdateInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDepositRecordUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNonFixedChargeRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *gqlmodels.NonFixedChargeRecordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalONonFixedChargeRecordInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationBasicChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *gqlmodels.OrganizationBasicChargeSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOOrganizationBasicChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationBasicChargeSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationBillDateRangeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationBillDateRangeSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationBillDateRangeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationBillDateRangeSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationNonFixedChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *gqlmodels.OrganizationNonFixedChargeSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOOrganizationNonFixedChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationNonFixedChargeSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationPrivacy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationPrivacyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationPrivacyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationPrivacyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationReceiptTemplateSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.OrganizationReceiptTemplateSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNOrganizationReceiptTemplateSettingInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationReceiptTemplateSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationReceipt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationReceiptInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationReceiptInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationReceiptInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.OrganizationSettingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOrganizationSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationSettingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePatientBillBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UpdatePatientBillBasicChargeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdatePatientBillBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillBasicChargeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePatientBillChargeDates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.UpdatePatientBillChargeDatesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdatePatientBillChargeDatesInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillChargeDatesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePatientBillNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UpdatePatientBillNoteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdatePatientBillNoteInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePatientBillSubsidy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UpdatePatientBillSubsidyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdatePatientBillSubsidyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillSubsidyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePayRecorNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePayRecordDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.PayRecordDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPayRecordDetailInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSubsidiesSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 []*gqlmodels.SubsidySettingUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSubsidySettingUpdateInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["needDeleteId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needDeleteId"))
		arg2, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["needDeleteId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTransferRefundLeave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.TransferRefundLeaveInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNTransferRefundLeaveInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_autoTextFields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["field"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["field"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_basicChargeSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_depositRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_depositRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nonFixedChargeRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nonFixedChargeRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg1, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg1
	var arg2 time.Time
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg2, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_organizationBasicChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationNonFixedChargeSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationReceiptTemplateSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patientBillBasicCharge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["basicChargeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basicChargeId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["basicChargeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patientBillSubsidy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subsidyId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subsidyId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subsidyId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patientBill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["billYear"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billYear"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billYear"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["billMonth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billMonth"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billMonth"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_patientBills_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 time.Time
	if tmp, ok := rawArgs["billDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billDate"))
		arg0, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billDate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_payRecordDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_payRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_payRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 time.Time
	if tmp, ok := rawArgs["payDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payDate"))
		arg0, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payDate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printDepositRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPatientBillGeneralTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 time.Time
	if tmp, ok := rawArgs["billDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billDate"))
		arg0, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billDate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPatientBill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPayRecordDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPayRecordGeneralTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 time.Time
	if tmp, ok := rawArgs["billDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billDate"))
		arg0, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billDate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPayRecordPartByTaxType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPayRecordPart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_printPayRecordsPartByTaxType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_subsidiesSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_subsidySetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_transferRefundLeave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_transferRefundLeaves_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientId"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg1, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg1
	var arg2 time.Time
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg2, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AllChargeSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.AllChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AllChargeSetting_patient(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.AllChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Patient)
	fc.Result = res
	return ec.marshalOPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _AllChargeSetting_detail1(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.AllChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTextField_id(ctx context.Context, field graphql.CollectedField, obj *models.AutoTextField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTextField",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AutoTextField().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTextField_moduleName(ctx context.Context, field graphql.CollectedField, obj *models.AutoTextField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTextField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTextField_itemName(ctx context.Context, field graphql.CollectedField, obj *models.AutoTextField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTextField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTextField_text(ctx context.Context, field graphql.CollectedField, obj *models.AutoTextField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTextField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_id(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BasicCharge().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_itemName(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_type(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_unit(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_price(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_taxType(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_startDate(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_endDate(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_note(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_receiptStatus(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_receiptDate(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_sortIndex(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_patient(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalNPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicCharge_user(ctx context.Context, field graphql.CollectedField, obj *models.BasicCharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicCharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicChargeSetting_id(ctx context.Context, field graphql.CollectedField, obj *models.BasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BasicChargeSetting().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicChargeSetting_sortIndex(ctx context.Context, field graphql.CollectedField, obj *models.BasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicChargeSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.BasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicChargeSetting_patient(ctx context.Context, field graphql.CollectedField, obj *models.BasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalOPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _BasicChargeSetting_organizationBasicChargeSetting(ctx context.Context, field graphql.CollectedField, obj *models.BasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationBasicChargeSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OrganizationBasicChargeSetting)
	fc.Result = res
	return ec.marshalNOrganizationBasicChargeSetting2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_id(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DepositRecord().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_date(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_type(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_price(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_drawee(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Drawee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_note(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_invalid(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invalid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_patient(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalOPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _DepositRecord_user(ctx context.Context, field graphql.CollectedField, obj *models.DepositRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepositRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Detail_date(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Detail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Detail_text1(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Detail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Detail_text2(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Detail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Detail_text3(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Detail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *models.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.File().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_fileName(ctx context.Context, field graphql.CollectedField, obj *models.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_url(ctx context.Context, field graphql.CollectedField, obj *models.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FixedChargeRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FixedChargeRecord_items(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FixedChargeRecord_patient(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAutoTextField(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAutoTextField_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAutoTextField(rctx, args["input"].(gqlmodels.AutoTextFieldInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAutoTextField(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAutoTextField_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAutoTextField(rctx, args["input"].(gqlmodels.AutoTextFieldInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBasicCharge(rctx, args["input"].(*gqlmodels.BasicChargeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBasicCharge(rctx, args["input"].(*gqlmodels.BasicChargeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDepositRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDepositRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDepositRecord(rctx, args["input"].(gqlmodels.DepositRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDepositRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDepositRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepositRecord(rctx, args["id"].(string), args["input"].(gqlmodels.DepositRecordUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_invalidDepositRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_invalidDepositRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InvalidDepositRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFile(rctx, args["fileName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UploadFileResponse)
	fc.Result = res
	return ec.marshalNUploadFileResponse2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUploadFileResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNonFixedChargeRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNonFixedChargeRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNonFixedChargeRecord(rctx, args["patientId"].(string), args["input"].([]*gqlmodels.NonFixedChargeRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNonFixedChargeRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNonFixedChargeRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNonFixedChargeRecord(rctx, args["id"].(string), args["input"].(*gqlmodels.NonFixedChargeRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteNonFixedChargeRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteNonFixedChargeRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNonFixedChargeRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganization(rctx, args["input"].(*gqlmodels.OrganizationSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationPrivacy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationPrivacy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationPrivacy(rctx, args["input"].(*gqlmodels.OrganizationPrivacyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationBillDateRangeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationBillDateRangeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationBillDateRangeSetting(rctx, args["input"].(*gqlmodels.OrganizationBillDateRangeSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrganizationBasicChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrganizationBasicChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganizationBasicChargeSetting(rctx, args["input"].(*gqlmodels.OrganizationBasicChargeSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationBasicChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationBasicChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationBasicChargeSetting(rctx, args["id"].(string), args["input"].(*gqlmodels.OrganizationBasicChargeSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteOrganizationBasicChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteOrganizationBasicChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganizationBasicChargeSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrganizationNonFixedChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrganizationNonFixedChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganizationNonFixedChargeSetting(rctx, args["input"].(*gqlmodels.OrganizationNonFixedChargeSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationNonFixedChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationNonFixedChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationNonFixedChargeSetting(rctx, args["id"].(string), args["input"].(*gqlmodels.OrganizationNonFixedChargeSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteOrganizationNonFixedChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteOrganizationNonFixedChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganizationNonFixedChargeSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationReceipt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationReceipt_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationReceipt(rctx, args["input"].(*gqlmodels.OrganizationReceiptInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrganizationReceiptTemplateSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrganizationReceiptTemplateSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganizationReceiptTemplateSetting(rctx, args["input"].(gqlmodels.OrganizationReceiptTemplateSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationReceiptTemplateSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationReceiptTemplateSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationReceiptTemplateSetting(rctx, args["id"].(string), args["input"].(gqlmodels.OrganizationReceiptTemplateSettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteOrganizationReceiptTemplateSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteOrganizationReceiptTemplateSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganizationReceiptTemplateSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPatientBill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPatientBill_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePatientBill(rctx, args["input"].(*gqlmodels.PatientBillInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPatientBills(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPatientBills_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePatientBills(rctx, args["input"].(*gqlmodels.PatientBillsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PatientBill)
	fc.Result = res
	return ec.marshalNPatientBill2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBillᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePatientBillNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePatientBillNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePatientBillNote(rctx, args["input"].(*gqlmodels.UpdatePatientBillNoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePatientBillChargeDates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePatientBillChargeDates_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePatientBillChargeDates(rctx, args["id"].(string), args["input"].(gqlmodels.UpdatePatientBillChargeDatesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPatientBillBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPatientBillBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPatientBillBasicCharge(rctx, args["input"].(*gqlmodels.CreatePatientBillBasicChargeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePatientBillBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePatientBillBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePatientBillBasicCharge(rctx, args["input"].(*gqlmodels.UpdatePatientBillBasicChargeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePatientBillBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePatientBillBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePatientBillBasicCharge(rctx, args["basicChargeId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPatientBillSubsidy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPatientBillSubsidy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPatientBillSubsidy(rctx, args["input"].(*gqlmodels.CreatePatientBillSubsidyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePatientBillSubsidy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePatientBillSubsidy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePatientBillSubsidy(rctx, args["input"].(*gqlmodels.UpdatePatientBillSubsidyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePatientBillSubsidy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePatientBillSubsidy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePatientBillSubsidy(rctx, args["subsidyId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPayRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPayRecords_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePayRecords(rctx, args["input"].(gqlmodels.PayRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_invalidPayRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_invalidPayRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InvalidPayRecord(rctx, args["id"].(string), args["input"].(gqlmodels.InvalidPayRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelInvalidPayRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelInvalidPayRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelInvalidPayRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePayRecorNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePayRecorNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePayRecorNote(rctx, args["id"].(string), args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPayRecordDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPayRecordDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePayRecordDetail(rctx, args["payRecrodId"].(string), args["input"].(gqlmodels.PayRecordDetailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePayRecordDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePayRecordDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePayRecordDetail(rctx, args["id"].(string), args["input"].(gqlmodels.PayRecordDetailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePayRecordDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePayRecordDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePayRecordDetail(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSubsidiesSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSubsidiesSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSubsidiesSetting(rctx, args["patientId"].(string), args["input"].([]*gqlmodels.SubsidySettingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSubsidiesSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSubsidiesSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSubsidiesSetting(rctx, args["patientId"].(string), args["input"].([]*gqlmodels.SubsidySettingUpdateInput), args["needDeleteId"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTransferRefundLeave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTransferRefundLeave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTransferRefundLeave(rctx, args["patientId"].(string), args["input"].(gqlmodels.TransferRefundLeaveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTransferRefundLeave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTransferRefundLeave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTransferRefundLeave(rctx, args["id"].(string), args["input"].(gqlmodels.TransferRefundLeaveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTransferRefundLeave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTransferRefundLeave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTransferRefundLeave(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_id(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NonFixedChargeRecord().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_nonFixedChargeDate(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_itemCategory(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_itemName(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_type(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_unit(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_price(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_quantity(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_subtotal(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_note(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_taxType(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_patient(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalNPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_user(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_receiptStatus(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NonFixedChargeRecord_receiptDate(ctx context.Context, field graphql.CollectedField, obj *models.NonFixedChargeRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NonFixedChargeRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_addressCity(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_addressDistrict(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_address(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_phone(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fax(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_owner(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_email(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_taxIdNumber(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxIdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_branchs(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branchs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(pq.StringArray)
	fc.Result = res
	return ec.marshalOPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_remittanceBank(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemittanceBank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_remittanceIdNumber(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemittanceIdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_remittanceUserName(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemittanceUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_establishmentNumber(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstablishmentNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fixedChargeStartMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeStartMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fixedChargeStartDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fixedChargeEndMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeEndMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_fixedChargeEndDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_nonFixedChargeStartMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeStartMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_nonFixedChargeStartDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_nonFixedChargeEndMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeEndMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_nonFixedChargeEndDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_transferRefundStartMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundStartMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_transferRefundStartDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_transferRefundEndMonth(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundEndMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_transferRefundEndDate(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_privacy(ctx context.Context, field graphql.CollectedField, obj *models.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Privacy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodels.PrivacyType)
	fc.Result = res
	return ec.marshalNPrivacyType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPrivacyType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_id(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationBasicChargeSetting().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_itemName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_type(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_unit(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_price(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationBasicChargeSetting_taxType(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationBasicChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationBasicChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_id(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationNonFixedChargeSetting().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_itemCategory(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_itemName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_type(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_unit(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_price(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNonFixedChargeSetting_taxType(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationNonFixedChargeSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNonFixedChargeSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_id(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationReceipt().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_firstText(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_year(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationReceipt().Year(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.YearType)
	fc.Result = res
	return ec.marshalOYearType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐYearType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_yearText(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_month(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationReceipt().Month(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.MonthType)
	fc.Result = res
	return ec.marshalOMonthType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐMonthType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_monthText(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonthText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_lastText(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceipt_isResetInNextCycle(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceipt) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceipt",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResetInNextCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_id(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationReceiptTemplateSetting().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_name(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_taxTypes(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pq.StringArray)
	fc.Result = res
	return ec.marshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_organizationPicture(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_titleName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_patientInfo(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pq.StringArray)
	fc.Result = res
	return ec.marshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_priceShowType(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceShowType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_organizationInfoOne(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationInfoOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pq.StringArray)
	fc.Result = res
	return ec.marshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_organizationInfoTwo(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationInfoTwo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pq.StringArray)
	fc.Result = res
	return ec.marshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_noteText(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoteText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealOneName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealOneName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealOnePicture(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealOnePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealTwoName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealTwoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealTwoPicture(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealTwoPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealThreeName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealThreeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealThreePicture(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealThreePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealFourName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealFourName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_sealFourPicture(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealFourPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_partOneName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartOneName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationReceiptTemplateSetting_partTwoName(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationReceiptTemplateSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationReceiptTemplateSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartTwoName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_id(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Patient().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_firstName(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_lastName(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_photoUrl(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_photoXPosition(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoXPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_photoYPosition(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoYPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_providerId(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_status(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_branch(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_room(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Room, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_bed(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Patient_users(ctx context.Context, field graphql.CollectedField, obj *models.Patient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_id(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PatientBill().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_amountReceived(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountReceived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_note(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_fixedChargeStartDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_fixedChargeEndDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FixedChargeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_transferRefundStartDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_transferRefundEndDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_nonFixedChargeStartDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_nonFixedChargeEndDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_billYear(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_billMonth(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_patient(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalOPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_editNoteDate(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditNoteDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_editNoteUser(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditNoteUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalOUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_user(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_basicCharges(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasicCharges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.BasicCharge)
	fc.Result = res
	return ec.marshalOBasicCharge2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicCharge(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_subsidies(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subsidies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Subsidy)
	fc.Result = res
	return ec.marshalOSubsidy2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidy(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_nonFixedChargeRecords(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonFixedChargeRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalONonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientBill_transferRefundLeaves(ctx context.Context, field graphql.CollectedField, obj *models.PatientBill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientBill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransferRefundLeaves, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.TransferRefundLeave)
	fc.Result = res
	return ec.marshalOTransferRefundLeave2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientLatestDepositRecords_latestRecord(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientLatestDepositRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientLatestDepositRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DepositRecord)
	fc.Result = res
	return ec.marshalODepositRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientLatestDepositRecords_latestUpdatedRecord(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientLatestDepositRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientLatestDepositRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUpdatedRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DepositRecord)
	fc.Result = res
	return ec.marshalODepositRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientLatestNonFixedChargeRecords_thisMonth(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientLatestNonFixedChargeRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientLatestNonFixedChargeRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThisMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalNNonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientLatestNonFixedChargeRecords_lastMonth(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientLatestNonFixedChargeRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientLatestNonFixedChargeRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalNNonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientLatestNonFixedChargeRecords_latestUpdatedRecord(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientLatestNonFixedChargeRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientLatestNonFixedChargeRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUpdatedRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalNNonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_firstName(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_lastName(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_idNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_photoUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_photoXPosition(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoXPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_photoYPosition(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoYPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_providerId(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_branch(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_room(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Room, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_bed(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_detail1(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Detail)
	fc.Result = res
	return ec.marshalODetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_detail2(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Detail)
	fc.Result = res
	return ec.marshalODetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientSort_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PatientSort) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientSort",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_id(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PayRecord().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_receiptNumber(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_taxType(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_amountDue(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_paidAmount(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaidAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_note(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_payYear(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_payMonth(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_isInvalid(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInvalid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_invalidDate(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_invalidCaption(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidCaption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_patient(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalNPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_user(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_createdUser(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_invalidUser(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalOUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecord_payRecordDetails(ctx context.Context, field graphql.CollectedField, obj *models.PayRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayRecordDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PayRecordDetail)
	fc.Result = res
	return ec.marshalOPayRecordDetail2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_id(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PayRecordDetail().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_recordDate(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_type(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PayRecordDetail().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodels.PayRecordDetailType)
	fc.Result = res
	return ec.marshalNPayRecordDetailType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailType(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_price(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_method(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_payer(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_handler(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handler, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_note(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayRecordDetail_user(ctx context.Context, field graphql.CollectedField, obj *models.PayRecordDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayRecordDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Patient(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Patients(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_autoTextFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_autoTextFields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AutoTextFields(rctx, args["field"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AutoTextField)
	fc.Result = res
	return ec.marshalNAutoTextField2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐAutoTextFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_basicChargeSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_basicChargeSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BasicChargeSettings(rctx, args["patientId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.BasicChargeSetting)
	fc.Result = res
	return ec.marshalNBasicChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicChargeSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_depositRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_depositRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepositRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DepositRecord)
	fc.Result = res
	return ec.marshalNDepositRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_depositRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_depositRecords_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepositRecords(rctx, args["patientId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DepositRecord)
	fc.Result = res
	return ec.marshalNDepositRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientLatestDepositRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientLatestDepositRecords(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PatientLatestDepositRecords)
	fc.Result = res
	return ec.marshalNPatientLatestDepositRecords2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestDepositRecords(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printDepositRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printDepositRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintDepositRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientLatestFixedChargeRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientLatestFixedChargeRecords(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.FixedChargeRecord)
	fc.Result = res
	return ec.marshalNFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐFixedChargeRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_nonFixedChargeRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_nonFixedChargeRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NonFixedChargeRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalNNonFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_nonFixedChargeRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_nonFixedChargeRecords_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NonFixedChargeRecords(rctx, args["patientId"].(string), args["startDate"].(time.Time), args["endDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.NonFixedChargeRecord)
	fc.Result = res
	return ec.marshalNNonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientLatestNonFixedChargeRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientLatestNonFixedChargeRecords(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PatientLatestNonFixedChargeRecords)
	fc.Result = res
	return ec.marshalNPatientLatestNonFixedChargeRecords2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestNonFixedChargeRecords(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organization(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationBasicChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationBasicChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationBasicChargeSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationBasicChargeSetting)
	fc.Result = res
	return ec.marshalNOrganizationBasicChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationBasicChargeSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationBasicChargeSettings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationBasicChargeSetting)
	fc.Result = res
	return ec.marshalNOrganizationBasicChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationNonFixedChargeSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationNonFixedChargeSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationNonFixedChargeSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationNonFixedChargeSetting)
	fc.Result = res
	return ec.marshalNOrganizationNonFixedChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationNonFixedChargeSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationNonFixedChargeSettings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationNonFixedChargeSetting)
	fc.Result = res
	return ec.marshalNOrganizationNonFixedChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationReceipt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationReceipt(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationReceipt)
	fc.Result = res
	return ec.marshalOOrganizationReceipt2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceipt(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationReceiptTemplateSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organizationReceiptTemplateSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationReceiptTemplateSetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrganizationReceiptTemplateSetting)
	fc.Result = res
	return ec.marshalOOrganizationReceiptTemplateSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationReceiptTemplateSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationReceiptTemplateSettings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationReceiptTemplateSetting)
	fc.Result = res
	return ec.marshalNOrganizationReceiptTemplateSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientBill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientBill_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientBill(rctx, args["patientId"].(string), args["billYear"].(int), args["billMonth"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PatientBill)
	fc.Result = res
	return ec.marshalOPatientBill2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBill(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientBills(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientBills_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientBills(rctx, args["billDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PatientBill)
	fc.Result = res
	return ec.marshalNPatientBill2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBillᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPatientBill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPatientBill_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPatientBill(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPatientBillGeneralTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPatientBillGeneralTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPatientBillGeneralTable(rctx, args["billDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientBillBasicCharge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientBillBasicCharge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientBillBasicCharge(rctx, args["basicChargeId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BasicCharge)
	fc.Result = res
	return ec.marshalOBasicCharge2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicCharge(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientBillSubsidy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientBillSubsidy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientBillSubsidy(rctx, args["subsidyId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Subsidy)
	fc.Result = res
	return ec.marshalOSubsidy2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidy(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payRecords_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PayRecords(rctx, args["payDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PayRecord)
	fc.Result = res
	return ec.marshalNPayRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payRecord_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PayRecord(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PayRecord)
	fc.Result = res
	return ec.marshalNPayRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPayRecordDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPayRecordDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPayRecordDetail(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPayRecordPart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPayRecordPart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPayRecordPart(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPayRecordPartByTaxType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPayRecordPartByTaxType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPayRecordPartByTaxType(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPayRecordsPartByTaxType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPayRecordsPartByTaxType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPayRecordsPartByTaxType(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_printPayRecordGeneralTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_printPayRecordGeneralTable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PrintPayRecordGeneralTable(rctx, args["billDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_payRecordDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_payRecordDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PayRecordDetail(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PayRecordDetail)
	fc.Result = res
	return ec.marshalNPayRecordDetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_subsidiesSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_subsidiesSetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubsidiesSetting(rctx, args["patientId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SubsidySetting)
	fc.Result = res
	return ec.marshalNSubsidySetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_subsidySetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_subsidySetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubsidySetting(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SubsidySetting)
	fc.Result = res
	return ec.marshalNSubsidySetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySetting(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_transferRefundLeave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_transferRefundLeave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TransferRefundLeave(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TransferRefundLeave)
	fc.Result = res
	return ec.marshalNTransferRefundLeave2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_transferRefundLeaves(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_transferRefundLeaves_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TransferRefundLeaves(rctx, args["patientId"].(string), args["startDate"].(time.Time), args["endDate"].(time.Time))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TransferRefundLeave)
	fc.Result = res
	return ec.marshalNTransferRefundLeave2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeaveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_id(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subsidy().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_itemName(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_type(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_price(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_unit(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_note(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_sortIndex(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_startDate(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_endDate(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_receiptStatus(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_receiptDate(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_patient(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Patient)
	fc.Result = res
	return ec.marshalNPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _Subsidy_user(ctx context.Context, field graphql.CollectedField, obj *models.Subsidy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subsidy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_id(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SubsidySetting().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_itemName(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_type(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_price(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_unit(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_sortIndex(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubsidySetting_note(ctx context.Context, field graphql.CollectedField, obj *models.SubsidySetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubsidySetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_id(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransferRefundLeave().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_startDate(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_endDate(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_reason(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_isReserveBed(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReserveBed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_note(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_items(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(datatypes.JSON)
	fc.Result = res
	return ec.marshalOTransferRefundItemsJsonType2gormᚗioᚋdatatypesᚐJSON(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_receiptStatus(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_receiptDate(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiptDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TransferRefundLeave_user(ctx context.Context, field graphql.CollectedField, obj *models.TransferRefundLeave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TransferRefundLeave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.User)
	fc.Result = res
	return ec.marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadFileResponse_signedUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UploadFileResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UploadFileResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadFileResponse_publicLink(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UploadFileResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UploadFileResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadFileResponse_fullName(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UploadFileResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UploadFileResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_displayName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_preference(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Preference(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UserPreference)
	fc.Result = res
	return ec.marshalOUserPreference2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUserPreference(ctx, field.Selections, res)
}

func (ec *executionContext) _User_providerId(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPreference_branch(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UserPreference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPreference_locale(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UserPreference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPreference_era(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UserPreference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Era, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.EraType)
	fc.Result = res
	return ec.marshalOEraType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐEraType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAutoTextFieldInput(ctx context.Context, obj interface{}) (gqlmodels.AutoTextFieldInput, error) {
	var it gqlmodels.AutoTextFieldInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBasicChargeInput(ctx context.Context, obj interface{}) (gqlmodels.BasicChargeInput, error) {
	var it gqlmodels.BasicChargeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationBasicChargeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationBasicChargeId"))
			it.OrganizationBasicChargeID, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePatientBillBasicChargeInput(ctx context.Context, obj interface{}) (gqlmodels.CreatePatientBillBasicChargeInput, error) {
	var it gqlmodels.CreatePatientBillBasicChargeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
			it.TaxType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePatientBillSubsidyInput(ctx context.Context, obj interface{}) (gqlmodels.CreatePatientBillSubsidyInput, error) {
	var it gqlmodels.CreatePatientBillSubsidyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepositRecordInput(ctx context.Context, obj interface{}) (gqlmodels.DepositRecordInput, error) {
	var it gqlmodels.DepositRecordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "drawee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drawee"))
			it.Drawee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepositRecordUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.DepositRecordUpdateInput, error) {
	var it gqlmodels.DepositRecordUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvalidPayRecordInput(ctx context.Context, obj interface{}) (gqlmodels.InvalidPayRecordInput, error) {
	var it gqlmodels.InvalidPayRecordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "invalidDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invalidDate"))
			it.InvalidDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "invalidCaption":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invalidCaption"))
			it.InvalidCaption, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNonFixedChargeRecordInput(ctx context.Context, obj interface{}) (gqlmodels.NonFixedChargeRecordInput, error) {
	var it gqlmodels.NonFixedChargeRecordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "nonFixedChargeDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeDate"))
			it.NonFixedChargeDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemCategory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemCategory"))
			it.ItemCategory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			it.Quantity, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "subtotal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtotal"))
			it.Subtotal, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
			it.TaxType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationBasicChargeSettingInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationBasicChargeSettingInput, error) {
	var it gqlmodels.OrganizationBasicChargeSettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
			it.TaxType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationBillDateRangeSettingInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationBillDateRangeSettingInput, error) {
	var it gqlmodels.OrganizationBillDateRangeSettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fixedChargeStartMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixedChargeStartMonth"))
			it.FixedChargeStartMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fixedChargeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixedChargeStartDate"))
			it.FixedChargeStartDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "fixedChargeEndMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixedChargeEndMonth"))
			it.FixedChargeEndMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fixedChargeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fixedChargeEndDate"))
			it.FixedChargeEndDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeStartMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeStartMonth"))
			it.NonFixedChargeStartMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeStartDate"))
			it.NonFixedChargeStartDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeEndMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeEndMonth"))
			it.NonFixedChargeEndMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeEndDate"))
			it.NonFixedChargeEndDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "transferRefundStartMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundStartMonth"))
			it.TransferRefundStartMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "transferRefundStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundStartDate"))
			it.TransferRefundStartDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "transferRefundEndMonth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundEndMonth"))
			it.TransferRefundEndMonth, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "transferRefundEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundEndDate"))
			it.TransferRefundEndDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationNonFixedChargeSettingInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationNonFixedChargeSettingInput, error) {
	var it gqlmodels.OrganizationNonFixedChargeSettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "itemCategory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemCategory"))
			it.ItemCategory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
			it.TaxType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPrivacyInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationPrivacyInput, error) {
	var it gqlmodels.OrganizationPrivacyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "privacy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privacy"))
			it.Privacy, err = ec.unmarshalNPrivacyType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPrivacyType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationReceiptInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationReceiptInput, error) {
	var it gqlmodels.OrganizationReceiptInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstText"))
			it.FirstText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOYearType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐYearType(ctx, v)
			if err != nil {
				return it, err
			}
		case "yearText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearText"))
			it.YearText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOMonthType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐMonthType(ctx, v)
			if err != nil {
				return it, err
			}
		case "monthText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monthText"))
			it.MonthText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastText"))
			it.LastText, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isResetInNextCycle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isResetInNextCycle"))
			it.IsResetInNextCycle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationReceiptTemplateSettingInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationReceiptTemplateSettingInput, error) {
	var it gqlmodels.OrganizationReceiptTemplateSettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxTypes"))
			it.TaxTypes, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationPicture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPicture"))
			it.OrganizationPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "titleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleName"))
			it.TitleName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientInfo"))
			it.PatientInfo, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationInfoOne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationInfoOne"))
			it.OrganizationInfoOne, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceShowType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceShowType"))
			it.PriceShowType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationInfoTwo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationInfoTwo"))
			it.OrganizationInfoTwo, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "noteText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			it.NoteText, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealOneName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealOneName"))
			it.SealOneName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealOnePicture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealOnePicture"))
			it.SealOnePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealTwoName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealTwoName"))
			it.SealTwoName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealTwoPicture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealTwoPicture"))
			it.SealTwoPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealThreeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealThreeName"))
			it.SealThreeName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealThreePicture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealThreePicture"))
			it.SealThreePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealFourName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealFourName"))
			it.SealFourName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealFourPicture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealFourPicture"))
			it.SealFourPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "partOneName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partOneName"))
			it.PartOneName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "partTwoName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partTwoName"))
			it.PartTwoName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationSettingInput(ctx context.Context, obj interface{}) (gqlmodels.OrganizationSettingInput, error) {
	var it gqlmodels.OrganizationSettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressCity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressCity"))
			it.AddressCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressDistrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressDistrict"))
			it.AddressDistrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax"))
			it.Fax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxIdNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxIdNumber"))
			it.TaxIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remittanceBank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remittanceBank"))
			it.RemittanceBank, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remittanceIdNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remittanceIdNumber"))
			it.RemittanceIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remittanceUserName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remittanceUserName"))
			it.RemittanceUserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "establishmentNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("establishmentNumber"))
			it.EstablishmentNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatientBillInput(ctx context.Context, obj interface{}) (gqlmodels.PatientBillInput, error) {
	var it gqlmodels.PatientBillInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "patientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "billDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billDate"))
			it.BillDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatientBillsInput(ctx context.Context, obj interface{}) (gqlmodels.PatientBillsInput, error) {
	var it gqlmodels.PatientBillsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "patientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientId"))
			it.PatientID, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "billDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billDate"))
			it.BillDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayRecordDetailInput(ctx context.Context, obj interface{}) (gqlmodels.PayRecordDetailInput, error) {
	var it gqlmodels.PayRecordDetailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "recordDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recordDate"))
			it.RecordDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNPayRecordDetailType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailType(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			it.Method, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "payer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payer"))
			it.Payer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handler":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handler"))
			it.Handler, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayRecordInput(ctx context.Context, obj interface{}) (gqlmodels.PayRecordInput, error) {
	var it gqlmodels.PayRecordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "payDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payDate"))
			it.PayDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientsId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientsId"))
			it.PatientsID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "openMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openMethod"))
			it.OpenMethod, err = ec.unmarshalNOpenMethodType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOpenMethodType(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxTypes"))
			it.TaxTypes, err = ec.unmarshalOTaxType2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubsidySettingInput(ctx context.Context, obj interface{}) (gqlmodels.SubsidySettingInput, error) {
	var it gqlmodels.SubsidySettingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubsidySettingUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.SubsidySettingUpdateInput, error) {
	var it gqlmodels.SubsidySettingUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransferRefundLeaveInput(ctx context.Context, obj interface{}) (gqlmodels.TransferRefundLeaveInput, error) {
	var it gqlmodels.TransferRefundLeaveInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isReserveBed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReserveBed"))
			it.IsReserveBed, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "items":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("items"))
			it.Items, err = ec.unmarshalNTransferRefundLeaveItem2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveItemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransferRefundLeaveItem(ctx context.Context, obj interface{}) (gqlmodels.TransferRefundLeaveItem, error) {
	var it gqlmodels.TransferRefundLeaveItem
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePatientBillBasicChargeInput(ctx context.Context, obj interface{}) (gqlmodels.UpdatePatientBillBasicChargeInput, error) {
	var it gqlmodels.UpdatePatientBillBasicChargeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "basicChargeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basicChargeId"))
			it.BasicChargeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
			it.TaxType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePatientBillChargeDatesInput(ctx context.Context, obj interface{}) (gqlmodels.UpdatePatientBillChargeDatesInput, error) {
	var it gqlmodels.UpdatePatientBillChargeDatesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "transferRefundStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundStartDate"))
			it.TransferRefundStartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "transferRefundEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transferRefundEndDate"))
			it.TransferRefundEndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeStartDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeStartDate"))
			it.NonFixedChargeStartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonFixedChargeEndDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonFixedChargeEndDate"))
			it.NonFixedChargeEndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePatientBillNoteInput(ctx context.Context, obj interface{}) (gqlmodels.UpdatePatientBillNoteInput, error) {
	var it gqlmodels.UpdatePatientBillNoteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePatientBillSubsidyInput(ctx context.Context, obj interface{}) (gqlmodels.UpdatePatientBillSubsidyInput, error) {
	var it gqlmodels.UpdatePatientBillSubsidyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "subsidyId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subsidyId"))
			it.SubsidyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "itemName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemName"))
			it.ItemName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var allChargeSettingImplementors = []string{"AllChargeSetting"}

func (ec *executionContext) _AllChargeSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.AllChargeSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allChargeSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllChargeSetting")
		case "updatedAt":
			out.Values[i] = ec._AllChargeSetting_updatedAt(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._AllChargeSetting_patient(ctx, field, obj)
		case "detail1":
			out.Values[i] = ec._AllChargeSetting_detail1(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var autoTextFieldImplementors = []string{"AutoTextField"}

func (ec *executionContext) _AutoTextField(ctx context.Context, sel ast.SelectionSet, obj *models.AutoTextField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, autoTextFieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AutoTextField")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AutoTextField_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "moduleName":
			out.Values[i] = ec._AutoTextField_moduleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "itemName":
			out.Values[i] = ec._AutoTextField_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "text":
			out.Values[i] = ec._AutoTextField_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var basicChargeImplementors = []string{"BasicCharge"}

func (ec *executionContext) _BasicCharge(ctx context.Context, sel ast.SelectionSet, obj *models.BasicCharge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, basicChargeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BasicCharge")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BasicCharge_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "itemName":
			out.Values[i] = ec._BasicCharge_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._BasicCharge_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._BasicCharge_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._BasicCharge_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxType":
			out.Values[i] = ec._BasicCharge_taxType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "startDate":
			out.Values[i] = ec._BasicCharge_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endDate":
			out.Values[i] = ec._BasicCharge_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._BasicCharge_note(ctx, field, obj)
		case "receiptStatus":
			out.Values[i] = ec._BasicCharge_receiptStatus(ctx, field, obj)
		case "receiptDate":
			out.Values[i] = ec._BasicCharge_receiptDate(ctx, field, obj)
		case "sortIndex":
			out.Values[i] = ec._BasicCharge_sortIndex(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._BasicCharge_patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			out.Values[i] = ec._BasicCharge_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var basicChargeSettingImplementors = []string{"BasicChargeSetting"}

func (ec *executionContext) _BasicChargeSetting(ctx context.Context, sel ast.SelectionSet, obj *models.BasicChargeSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, basicChargeSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BasicChargeSetting")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BasicChargeSetting_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "sortIndex":
			out.Values[i] = ec._BasicChargeSetting_sortIndex(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BasicChargeSetting_updatedAt(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._BasicChargeSetting_patient(ctx, field, obj)
		case "organizationBasicChargeSetting":
			out.Values[i] = ec._BasicChargeSetting_organizationBasicChargeSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var depositRecordImplementors = []string{"DepositRecord"}

func (ec *executionContext) _DepositRecord(ctx context.Context, sel ast.SelectionSet, obj *models.DepositRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, depositRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepositRecord")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DepositRecord_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "idNumber":
			out.Values[i] = ec._DepositRecord_idNumber(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._DepositRecord_updatedAt(ctx, field, obj)
		case "date":
			out.Values[i] = ec._DepositRecord_date(ctx, field, obj)
		case "type":
			out.Values[i] = ec._DepositRecord_type(ctx, field, obj)
		case "price":
			out.Values[i] = ec._DepositRecord_price(ctx, field, obj)
		case "drawee":
			out.Values[i] = ec._DepositRecord_drawee(ctx, field, obj)
		case "note":
			out.Values[i] = ec._DepositRecord_note(ctx, field, obj)
		case "invalid":
			out.Values[i] = ec._DepositRecord_invalid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "patient":
			out.Values[i] = ec._DepositRecord_patient(ctx, field, obj)
		case "user":
			out.Values[i] = ec._DepositRecord_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var detailImplementors = []string{"Detail"}

func (ec *executionContext) _Detail(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Detail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, detailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Detail")
		case "date":
			out.Values[i] = ec._Detail_date(ctx, field, obj)
		case "text1":
			out.Values[i] = ec._Detail_text1(ctx, field, obj)
		case "text2":
			out.Values[i] = ec._Detail_text2(ctx, field, obj)
		case "text3":
			out.Values[i] = ec._Detail_text3(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *models.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._File_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fileName":
			out.Values[i] = ec._File_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "url":
			out.Values[i] = ec._File_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fixedChargeRecordImplementors = []string{"FixedChargeRecord"}

func (ec *executionContext) _FixedChargeRecord(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FixedChargeRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fixedChargeRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixedChargeRecord")
		case "updatedAt":
			out.Values[i] = ec._FixedChargeRecord_updatedAt(ctx, field, obj)
		case "items":
			out.Values[i] = ec._FixedChargeRecord_items(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._FixedChargeRecord_patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAutoTextField":
			out.Values[i] = ec._Mutation_createAutoTextField(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAutoTextField":
			out.Values[i] = ec._Mutation_deleteAutoTextField(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBasicCharge":
			out.Values[i] = ec._Mutation_createBasicCharge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBasicCharge":
			out.Values[i] = ec._Mutation_updateBasicCharge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDepositRecord":
			out.Values[i] = ec._Mutation_createDepositRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDepositRecord":
			out.Values[i] = ec._Mutation_updateDepositRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invalidDepositRecord":
			out.Values[i] = ec._Mutation_invalidDepositRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFile":
			out.Values[i] = ec._Mutation_createFile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createNonFixedChargeRecord":
			out.Values[i] = ec._Mutation_createNonFixedChargeRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateNonFixedChargeRecord":
			out.Values[i] = ec._Mutation_updateNonFixedChargeRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteNonFixedChargeRecord":
			out.Values[i] = ec._Mutation_deleteNonFixedChargeRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganization":
			out.Values[i] = ec._Mutation_updateOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationPrivacy":
			out.Values[i] = ec._Mutation_updateOrganizationPrivacy(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationBillDateRangeSetting":
			out.Values[i] = ec._Mutation_updateOrganizationBillDateRangeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrganizationBasicChargeSetting":
			out.Values[i] = ec._Mutation_createOrganizationBasicChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationBasicChargeSetting":
			out.Values[i] = ec._Mutation_updateOrganizationBasicChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrganizationBasicChargeSetting":
			out.Values[i] = ec._Mutation_deleteOrganizationBasicChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrganizationNonFixedChargeSetting":
			out.Values[i] = ec._Mutation_createOrganizationNonFixedChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationNonFixedChargeSetting":
			out.Values[i] = ec._Mutation_updateOrganizationNonFixedChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrganizationNonFixedChargeSetting":
			out.Values[i] = ec._Mutation_deleteOrganizationNonFixedChargeSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationReceipt":
			out.Values[i] = ec._Mutation_updateOrganizationReceipt(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrganizationReceiptTemplateSetting":
			out.Values[i] = ec._Mutation_createOrganizationReceiptTemplateSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationReceiptTemplateSetting":
			out.Values[i] = ec._Mutation_updateOrganizationReceiptTemplateSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrganizationReceiptTemplateSetting":
			out.Values[i] = ec._Mutation_deleteOrganizationReceiptTemplateSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPatientBill":
			out.Values[i] = ec._Mutation_createPatientBill(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPatientBills":
			out.Values[i] = ec._Mutation_createPatientBills(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePatientBillNote":
			out.Values[i] = ec._Mutation_updatePatientBillNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePatientBillChargeDates":
			out.Values[i] = ec._Mutation_updatePatientBillChargeDates(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPatientBillBasicCharge":
			out.Values[i] = ec._Mutation_addPatientBillBasicCharge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePatientBillBasicCharge":
			out.Values[i] = ec._Mutation_updatePatientBillBasicCharge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePatientBillBasicCharge":
			out.Values[i] = ec._Mutation_deletePatientBillBasicCharge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPatientBillSubsidy":
			out.Values[i] = ec._Mutation_addPatientBillSubsidy(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePatientBillSubsidy":
			out.Values[i] = ec._Mutation_updatePatientBillSubsidy(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePatientBillSubsidy":
			out.Values[i] = ec._Mutation_deletePatientBillSubsidy(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPayRecords":
			out.Values[i] = ec._Mutation_createPayRecords(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invalidPayRecord":
			out.Values[i] = ec._Mutation_invalidPayRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelInvalidPayRecord":
			out.Values[i] = ec._Mutation_cancelInvalidPayRecord(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePayRecorNote":
			out.Values[i] = ec._Mutation_updatePayRecorNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPayRecordDetail":
			out.Values[i] = ec._Mutation_createPayRecordDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePayRecordDetail":
			out.Values[i] = ec._Mutation_updatePayRecordDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePayRecordDetail":
			out.Values[i] = ec._Mutation_deletePayRecordDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSubsidiesSetting":
			out.Values[i] = ec._Mutation_createSubsidiesSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSubsidiesSetting":
			out.Values[i] = ec._Mutation_updateSubsidiesSetting(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTransferRefundLeave":
			out.Values[i] = ec._Mutation_createTransferRefundLeave(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTransferRefundLeave":
			out.Values[i] = ec._Mutation_updateTransferRefundLeave(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTransferRefundLeave":
			out.Values[i] = ec._Mutation_deleteTransferRefundLeave(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logout":
			out.Values[i] = ec._Mutation_logout(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nonFixedChargeRecordImplementors = []string{"NonFixedChargeRecord"}

func (ec *executionContext) _NonFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, obj *models.NonFixedChargeRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nonFixedChargeRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NonFixedChargeRecord")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NonFixedChargeRecord_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._NonFixedChargeRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._NonFixedChargeRecord_updatedAt(ctx, field, obj)
		case "nonFixedChargeDate":
			out.Values[i] = ec._NonFixedChargeRecord_nonFixedChargeDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "itemCategory":
			out.Values[i] = ec._NonFixedChargeRecord_itemCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "itemName":
			out.Values[i] = ec._NonFixedChargeRecord_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._NonFixedChargeRecord_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._NonFixedChargeRecord_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._NonFixedChargeRecord_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "quantity":
			out.Values[i] = ec._NonFixedChargeRecord_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subtotal":
			out.Values[i] = ec._NonFixedChargeRecord_subtotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._NonFixedChargeRecord_note(ctx, field, obj)
		case "taxType":
			out.Values[i] = ec._NonFixedChargeRecord_taxType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "patient":
			out.Values[i] = ec._NonFixedChargeRecord_patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			out.Values[i] = ec._NonFixedChargeRecord_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "receiptStatus":
			out.Values[i] = ec._NonFixedChargeRecord_receiptStatus(ctx, field, obj)
		case "receiptDate":
			out.Values[i] = ec._NonFixedChargeRecord_receiptDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *models.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			out.Values[i] = ec._Organization_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "addressCity":
			out.Values[i] = ec._Organization_addressCity(ctx, field, obj)
		case "addressDistrict":
			out.Values[i] = ec._Organization_addressDistrict(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Organization_address(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Organization_phone(ctx, field, obj)
		case "fax":
			out.Values[i] = ec._Organization_fax(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._Organization_owner(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Organization_email(ctx, field, obj)
		case "taxIdNumber":
			out.Values[i] = ec._Organization_taxIdNumber(ctx, field, obj)
		case "branchs":
			out.Values[i] = ec._Organization_branchs(ctx, field, obj)
		case "remittanceBank":
			out.Values[i] = ec._Organization_remittanceBank(ctx, field, obj)
		case "remittanceIdNumber":
			out.Values[i] = ec._Organization_remittanceIdNumber(ctx, field, obj)
		case "remittanceUserName":
			out.Values[i] = ec._Organization_remittanceUserName(ctx, field, obj)
		case "establishmentNumber":
			out.Values[i] = ec._Organization_establishmentNumber(ctx, field, obj)
		case "fixedChargeStartMonth":
			out.Values[i] = ec._Organization_fixedChargeStartMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fixedChargeStartDate":
			out.Values[i] = ec._Organization_fixedChargeStartDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fixedChargeEndMonth":
			out.Values[i] = ec._Organization_fixedChargeEndMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fixedChargeEndDate":
			out.Values[i] = ec._Organization_fixedChargeEndDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nonFixedChargeStartMonth":
			out.Values[i] = ec._Organization_nonFixedChargeStartMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nonFixedChargeStartDate":
			out.Values[i] = ec._Organization_nonFixedChargeStartDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nonFixedChargeEndMonth":
			out.Values[i] = ec._Organization_nonFixedChargeEndMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "nonFixedChargeEndDate":
			out.Values[i] = ec._Organization_nonFixedChargeEndDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transferRefundStartMonth":
			out.Values[i] = ec._Organization_transferRefundStartMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transferRefundStartDate":
			out.Values[i] = ec._Organization_transferRefundStartDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transferRefundEndMonth":
			out.Values[i] = ec._Organization_transferRefundEndMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "transferRefundEndDate":
			out.Values[i] = ec._Organization_transferRefundEndDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "privacy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_privacy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationBasicChargeSettingImplementors = []string{"OrganizationBasicChargeSetting"}

func (ec *executionContext) _OrganizationBasicChargeSetting(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationBasicChargeSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationBasicChargeSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationBasicChargeSetting")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationBasicChargeSetting_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "itemName":
			out.Values[i] = ec._OrganizationBasicChargeSetting_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._OrganizationBasicChargeSetting_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._OrganizationBasicChargeSetting_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._OrganizationBasicChargeSetting_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxType":
			out.Values[i] = ec._OrganizationBasicChargeSetting_taxType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationNonFixedChargeSettingImplementors = []string{"OrganizationNonFixedChargeSetting"}

func (ec *executionContext) _OrganizationNonFixedChargeSetting(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationNonFixedChargeSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationNonFixedChargeSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationNonFixedChargeSetting")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationNonFixedChargeSetting_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "itemCategory":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_itemCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "itemName":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxType":
			out.Values[i] = ec._OrganizationNonFixedChargeSetting_taxType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationReceiptImplementors = []string{"OrganizationReceipt"}

func (ec *executionContext) _OrganizationReceipt(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationReceipt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationReceiptImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationReceipt")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationReceipt_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstText":
			out.Values[i] = ec._OrganizationReceipt_firstText(ctx, field, obj)
		case "year":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationReceipt_year(ctx, field, obj)
				return res
			})
		case "yearText":
			out.Values[i] = ec._OrganizationReceipt_yearText(ctx, field, obj)
		case "month":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationReceipt_month(ctx, field, obj)
				return res
			})
		case "monthText":
			out.Values[i] = ec._OrganizationReceipt_monthText(ctx, field, obj)
		case "lastText":
			out.Values[i] = ec._OrganizationReceipt_lastText(ctx, field, obj)
		case "isResetInNextCycle":
			out.Values[i] = ec._OrganizationReceipt_isResetInNextCycle(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationReceiptTemplateSettingImplementors = []string{"OrganizationReceiptTemplateSetting"}

func (ec *executionContext) _OrganizationReceiptTemplateSetting(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationReceiptTemplateSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationReceiptTemplateSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationReceiptTemplateSetting")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationReceiptTemplateSetting_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxTypes":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_taxTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organizationPicture":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_organizationPicture(ctx, field, obj)
		case "titleName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_titleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "patientInfo":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_patientInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "priceShowType":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_priceShowType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organizationInfoOne":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_organizationInfoOne(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "organizationInfoTwo":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_organizationInfoTwo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "noteText":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_noteText(ctx, field, obj)
		case "sealOneName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealOneName(ctx, field, obj)
		case "sealOnePicture":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealOnePicture(ctx, field, obj)
		case "sealTwoName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealTwoName(ctx, field, obj)
		case "sealTwoPicture":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealTwoPicture(ctx, field, obj)
		case "sealThreeName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealThreeName(ctx, field, obj)
		case "sealThreePicture":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealThreePicture(ctx, field, obj)
		case "sealFourName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealFourName(ctx, field, obj)
		case "sealFourPicture":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_sealFourPicture(ctx, field, obj)
		case "partOneName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_partOneName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "partTwoName":
			out.Values[i] = ec._OrganizationReceiptTemplateSetting_partTwoName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientImplementors = []string{"Patient"}

func (ec *executionContext) _Patient(ctx context.Context, sel ast.SelectionSet, obj *models.Patient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Patient")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Patient_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstName":
			out.Values[i] = ec._Patient_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Patient_lastName(ctx, field, obj)
		case "idNumber":
			out.Values[i] = ec._Patient_idNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "photoUrl":
			out.Values[i] = ec._Patient_photoUrl(ctx, field, obj)
		case "photoXPosition":
			out.Values[i] = ec._Patient_photoXPosition(ctx, field, obj)
		case "photoYPosition":
			out.Values[i] = ec._Patient_photoYPosition(ctx, field, obj)
		case "providerId":
			out.Values[i] = ec._Patient_providerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Patient_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "branch":
			out.Values[i] = ec._Patient_branch(ctx, field, obj)
		case "room":
			out.Values[i] = ec._Patient_room(ctx, field, obj)
		case "bed":
			out.Values[i] = ec._Patient_bed(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Patient_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientBillImplementors = []string{"PatientBill"}

func (ec *executionContext) _PatientBill(ctx context.Context, sel ast.SelectionSet, obj *models.PatientBill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientBillImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientBill")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PatientBill_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._PatientBill_createdAt(ctx, field, obj)
		case "amountReceived":
			out.Values[i] = ec._PatientBill_amountReceived(ctx, field, obj)
		case "note":
			out.Values[i] = ec._PatientBill_note(ctx, field, obj)
		case "fixedChargeStartDate":
			out.Values[i] = ec._PatientBill_fixedChargeStartDate(ctx, field, obj)
		case "fixedChargeEndDate":
			out.Values[i] = ec._PatientBill_fixedChargeEndDate(ctx, field, obj)
		case "transferRefundStartDate":
			out.Values[i] = ec._PatientBill_transferRefundStartDate(ctx, field, obj)
		case "transferRefundEndDate":
			out.Values[i] = ec._PatientBill_transferRefundEndDate(ctx, field, obj)
		case "nonFixedChargeStartDate":
			out.Values[i] = ec._PatientBill_nonFixedChargeStartDate(ctx, field, obj)
		case "nonFixedChargeEndDate":
			out.Values[i] = ec._PatientBill_nonFixedChargeEndDate(ctx, field, obj)
		case "billYear":
			out.Values[i] = ec._PatientBill_billYear(ctx, field, obj)
		case "billMonth":
			out.Values[i] = ec._PatientBill_billMonth(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._PatientBill_patient(ctx, field, obj)
		case "editNoteDate":
			out.Values[i] = ec._PatientBill_editNoteDate(ctx, field, obj)
		case "editNoteUser":
			out.Values[i] = ec._PatientBill_editNoteUser(ctx, field, obj)
		case "user":
			out.Values[i] = ec._PatientBill_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "basicCharges":
			out.Values[i] = ec._PatientBill_basicCharges(ctx, field, obj)
		case "subsidies":
			out.Values[i] = ec._PatientBill_subsidies(ctx, field, obj)
		case "nonFixedChargeRecords":
			out.Values[i] = ec._PatientBill_nonFixedChargeRecords(ctx, field, obj)
		case "transferRefundLeaves":
			out.Values[i] = ec._PatientBill_transferRefundLeaves(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientLatestDepositRecordsImplementors = []string{"PatientLatestDepositRecords"}

func (ec *executionContext) _PatientLatestDepositRecords(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PatientLatestDepositRecords) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientLatestDepositRecordsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientLatestDepositRecords")
		case "latestRecord":
			out.Values[i] = ec._PatientLatestDepositRecords_latestRecord(ctx, field, obj)
		case "latestUpdatedRecord":
			out.Values[i] = ec._PatientLatestDepositRecords_latestUpdatedRecord(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientLatestNonFixedChargeRecordsImplementors = []string{"PatientLatestNonFixedChargeRecords"}

func (ec *executionContext) _PatientLatestNonFixedChargeRecords(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PatientLatestNonFixedChargeRecords) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientLatestNonFixedChargeRecordsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientLatestNonFixedChargeRecords")
		case "thisMonth":
			out.Values[i] = ec._PatientLatestNonFixedChargeRecords_thisMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastMonth":
			out.Values[i] = ec._PatientLatestNonFixedChargeRecords_lastMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latestUpdatedRecord":
			out.Values[i] = ec._PatientLatestNonFixedChargeRecords_latestUpdatedRecord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientSortImplementors = []string{"PatientSort"}

func (ec *executionContext) _PatientSort(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PatientSort) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientSortImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientSort")
		case "id":
			out.Values[i] = ec._PatientSort_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._PatientSort_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._PatientSort_lastName(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PatientSort_updatedAt(ctx, field, obj)
		case "idNumber":
			out.Values[i] = ec._PatientSort_idNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "photoUrl":
			out.Values[i] = ec._PatientSort_photoUrl(ctx, field, obj)
		case "photoXPosition":
			out.Values[i] = ec._PatientSort_photoXPosition(ctx, field, obj)
		case "photoYPosition":
			out.Values[i] = ec._PatientSort_photoYPosition(ctx, field, obj)
		case "providerId":
			out.Values[i] = ec._PatientSort_providerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._PatientSort_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branch":
			out.Values[i] = ec._PatientSort_branch(ctx, field, obj)
		case "room":
			out.Values[i] = ec._PatientSort_room(ctx, field, obj)
		case "bed":
			out.Values[i] = ec._PatientSort_bed(ctx, field, obj)
		case "detail1":
			out.Values[i] = ec._PatientSort_detail1(ctx, field, obj)
		case "detail2":
			out.Values[i] = ec._PatientSort_detail2(ctx, field, obj)
		case "users":
			out.Values[i] = ec._PatientSort_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payRecordImplementors = []string{"PayRecord"}

func (ec *executionContext) _PayRecord(ctx context.Context, sel ast.SelectionSet, obj *models.PayRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayRecord")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PayRecord_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._PayRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "receiptNumber":
			out.Values[i] = ec._PayRecord_receiptNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxType":
			out.Values[i] = ec._PayRecord_taxType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "amountDue":
			out.Values[i] = ec._PayRecord_amountDue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "paidAmount":
			out.Values[i] = ec._PayRecord_paidAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._PayRecord_note(ctx, field, obj)
		case "payYear":
			out.Values[i] = ec._PayRecord_payYear(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payMonth":
			out.Values[i] = ec._PayRecord_payMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isInvalid":
			out.Values[i] = ec._PayRecord_isInvalid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "invalidDate":
			out.Values[i] = ec._PayRecord_invalidDate(ctx, field, obj)
		case "invalidCaption":
			out.Values[i] = ec._PayRecord_invalidCaption(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._PayRecord_patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			out.Values[i] = ec._PayRecord_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdUser":
			out.Values[i] = ec._PayRecord_createdUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "invalidUser":
			out.Values[i] = ec._PayRecord_invalidUser(ctx, field, obj)
		case "payRecordDetails":
			out.Values[i] = ec._PayRecord_payRecordDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payRecordDetailImplementors = []string{"PayRecordDetail"}

func (ec *executionContext) _PayRecordDetail(ctx context.Context, sel ast.SelectionSet, obj *models.PayRecordDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payRecordDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayRecordDetail")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PayRecordDetail_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recordDate":
			out.Values[i] = ec._PayRecordDetail_recordDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PayRecordDetail_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "price":
			out.Values[i] = ec._PayRecordDetail_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "method":
			out.Values[i] = ec._PayRecordDetail_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payer":
			out.Values[i] = ec._PayRecordDetail_payer(ctx, field, obj)
		case "handler":
			out.Values[i] = ec._PayRecordDetail_handler(ctx, field, obj)
		case "note":
			out.Values[i] = ec._PayRecordDetail_note(ctx, field, obj)
		case "user":
			out.Values[i] = ec._PayRecordDetail_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "patient":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patient(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patients":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "autoTextFields":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_autoTextFields(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "basicChargeSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_basicChargeSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "depositRecord":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_depositRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "depositRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_depositRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientLatestDepositRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientLatestDepositRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printDepositRecord":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printDepositRecord(ctx, field)
				return res
			})
		case "patientLatestFixedChargeRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientLatestFixedChargeRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nonFixedChargeRecord":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nonFixedChargeRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nonFixedChargeRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nonFixedChargeRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientLatestNonFixedChargeRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientLatestNonFixedChargeRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationBasicChargeSetting":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationBasicChargeSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationBasicChargeSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationBasicChargeSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationNonFixedChargeSetting":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationNonFixedChargeSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationNonFixedChargeSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationNonFixedChargeSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationReceipt":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationReceipt(ctx, field)
				return res
			})
		case "organizationReceiptTemplateSetting":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationReceiptTemplateSetting(ctx, field)
				return res
			})
		case "organizationReceiptTemplateSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationReceiptTemplateSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientBill":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientBill(ctx, field)
				return res
			})
		case "patientBills":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientBills(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPatientBill":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPatientBill(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPatientBillGeneralTable":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPatientBillGeneralTable(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientBillBasicCharge":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientBillBasicCharge(ctx, field)
				return res
			})
		case "patientBillSubsidy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientBillSubsidy(ctx, field)
				return res
			})
		case "payRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payRecord":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payRecord(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPayRecordDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPayRecordDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPayRecordPart":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPayRecordPart(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPayRecordPartByTaxType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPayRecordPartByTaxType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPayRecordsPartByTaxType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPayRecordsPartByTaxType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "printPayRecordGeneralTable":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_printPayRecordGeneralTable(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "payRecordDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_payRecordDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subsidiesSetting":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subsidiesSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subsidySetting":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subsidySetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "transferRefundLeave":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transferRefundLeave(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "transferRefundLeaves":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transferRefundLeaves(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subsidyImplementors = []string{"Subsidy"}

func (ec *executionContext) _Subsidy(ctx context.Context, sel ast.SelectionSet, obj *models.Subsidy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subsidyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Subsidy")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Subsidy_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Subsidy_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "itemName":
			out.Values[i] = ec._Subsidy_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Subsidy_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._Subsidy_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._Subsidy_unit(ctx, field, obj)
		case "idNumber":
			out.Values[i] = ec._Subsidy_idNumber(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Subsidy_note(ctx, field, obj)
		case "sortIndex":
			out.Values[i] = ec._Subsidy_sortIndex(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._Subsidy_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endDate":
			out.Values[i] = ec._Subsidy_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "receiptStatus":
			out.Values[i] = ec._Subsidy_receiptStatus(ctx, field, obj)
		case "receiptDate":
			out.Values[i] = ec._Subsidy_receiptDate(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._Subsidy_patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			out.Values[i] = ec._Subsidy_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subsidySettingImplementors = []string{"SubsidySetting"}

func (ec *executionContext) _SubsidySetting(ctx context.Context, sel ast.SelectionSet, obj *models.SubsidySetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subsidySettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubsidySetting")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SubsidySetting_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "itemName":
			out.Values[i] = ec._SubsidySetting_itemName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._SubsidySetting_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			out.Values[i] = ec._SubsidySetting_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "unit":
			out.Values[i] = ec._SubsidySetting_unit(ctx, field, obj)
		case "idNumber":
			out.Values[i] = ec._SubsidySetting_idNumber(ctx, field, obj)
		case "sortIndex":
			out.Values[i] = ec._SubsidySetting_sortIndex(ctx, field, obj)
		case "note":
			out.Values[i] = ec._SubsidySetting_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var transferRefundLeaveImplementors = []string{"TransferRefundLeave"}

func (ec *executionContext) _TransferRefundLeave(ctx context.Context, sel ast.SelectionSet, obj *models.TransferRefundLeave) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferRefundLeaveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferRefundLeave")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransferRefundLeave_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._TransferRefundLeave_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "startDate":
			out.Values[i] = ec._TransferRefundLeave_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "endDate":
			out.Values[i] = ec._TransferRefundLeave_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reason":
			out.Values[i] = ec._TransferRefundLeave_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isReserveBed":
			out.Values[i] = ec._TransferRefundLeave_isReserveBed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			out.Values[i] = ec._TransferRefundLeave_note(ctx, field, obj)
		case "items":
			out.Values[i] = ec._TransferRefundLeave_items(ctx, field, obj)
		case "receiptStatus":
			out.Values[i] = ec._TransferRefundLeave_receiptStatus(ctx, field, obj)
		case "receiptDate":
			out.Values[i] = ec._TransferRefundLeave_receiptDate(ctx, field, obj)
		case "user":
			out.Values[i] = ec._TransferRefundLeave_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uploadFileResponseImplementors = []string{"UploadFileResponse"}

func (ec *executionContext) _UploadFileResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UploadFileResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uploadFileResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UploadFileResponse")
		case "signedUrl":
			out.Values[i] = ec._UploadFileResponse_signedUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "publicLink":
			out.Values[i] = ec._UploadFileResponse_publicLink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullName":
			out.Values[i] = ec._UploadFileResponse_fullName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._User_displayName(ctx, field, obj)
		case "idNumber":
			out.Values[i] = ec._User_idNumber(ctx, field, obj)
		case "preference":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_preference(ctx, field, obj)
				return res
			})
		case "providerId":
			out.Values[i] = ec._User_providerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPreferenceImplementors = []string{"UserPreference"}

func (ec *executionContext) _UserPreference(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UserPreference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPreferenceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPreference")
		case "branch":
			out.Values[i] = ec._UserPreference_branch(ctx, field, obj)
		case "locale":
			out.Values[i] = ec._UserPreference_locale(ctx, field, obj)
		case "era":
			out.Values[i] = ec._UserPreference_era(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAutoTextField2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐAutoTextFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AutoTextField) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAutoTextField2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐAutoTextField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAutoTextField2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐAutoTextField(ctx context.Context, sel ast.SelectionSet, v *models.AutoTextField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AutoTextField(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAutoTextFieldInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐAutoTextFieldInput(ctx context.Context, v interface{}) (gqlmodels.AutoTextFieldInput, error) {
	res, err := ec.unmarshalInputAutoTextFieldInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBasicChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicChargeSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.BasicChargeSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBasicChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicChargeSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBasicChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicChargeSetting(ctx context.Context, sel ast.SelectionSet, v *models.BasicChargeSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BasicChargeSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDepositRecord2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx context.Context, sel ast.SelectionSet, v models.DepositRecord) graphql.Marshaler {
	return ec._DepositRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepositRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DepositRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepositRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDepositRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx context.Context, sel ast.SelectionSet, v *models.DepositRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepositRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepositRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDepositRecordInput(ctx context.Context, v interface{}) (gqlmodels.DepositRecordInput, error) {
	res, err := ec.unmarshalInputDepositRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepositRecordUpdateInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDepositRecordUpdateInput(ctx context.Context, v interface{}) (gqlmodels.DepositRecordUpdateInput, error) {
	res, err := ec.unmarshalInputDepositRecordUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐFixedChargeRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.FixedChargeRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐFixedChargeRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FixedChargeRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FixedChargeRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInvalidPayRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐInvalidPayRecordInput(ctx context.Context, v interface{}) (gqlmodels.InvalidPayRecordInput, error) {
	res, err := ec.unmarshalInputInvalidPayRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNonFixedChargeRecord2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, v models.NonFixedChargeRecord) graphql.Marshaler {
	return ec._NonFixedChargeRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNNonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.NonFixedChargeRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNonFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNonFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, v *models.NonFixedChargeRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NonFixedChargeRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNonFixedChargeRecordInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.NonFixedChargeRecordInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.NonFixedChargeRecordInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNonFixedChargeRecordInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNonFixedChargeRecordInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInput(ctx context.Context, v interface{}) (*gqlmodels.NonFixedChargeRecordInput, error) {
	res, err := ec.unmarshalInputNonFixedChargeRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOpenMethodType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOpenMethodType(ctx context.Context, v interface{}) (gqlmodels.OpenMethodType, error) {
	var res gqlmodels.OpenMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOpenMethodType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOpenMethodType(ctx context.Context, sel ast.SelectionSet, v gqlmodels.OpenMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrganization2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v models.Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganization2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *models.Organization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationBasicChargeSetting2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSetting(ctx context.Context, sel ast.SelectionSet, v models.OrganizationBasicChargeSetting) graphql.Marshaler {
	return ec._OrganizationBasicChargeSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationBasicChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrganizationBasicChargeSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationBasicChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrganizationBasicChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationBasicChargeSetting(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationBasicChargeSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationBasicChargeSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationNonFixedChargeSetting2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSetting(ctx context.Context, sel ast.SelectionSet, v models.OrganizationNonFixedChargeSetting) graphql.Marshaler {
	return ec._OrganizationNonFixedChargeSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationNonFixedChargeSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrganizationNonFixedChargeSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationNonFixedChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrganizationNonFixedChargeSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationNonFixedChargeSetting(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationNonFixedChargeSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationNonFixedChargeSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationReceiptTemplateSetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrganizationReceiptTemplateSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationReceiptTemplateSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrganizationReceiptTemplateSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSetting(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationReceiptTemplateSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationReceiptTemplateSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationReceiptTemplateSettingInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationReceiptTemplateSettingInput(ctx context.Context, v interface{}) (gqlmodels.OrganizationReceiptTemplateSettingInput, error) {
	res, err := ec.unmarshalInputOrganizationReceiptTemplateSettingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx context.Context, sel ast.SelectionSet, v models.Patient) graphql.Marshaler {
	return ec._Patient(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatient2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Patient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx context.Context, sel ast.SelectionSet, v *models.Patient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Patient(ctx, sel, v)
}

func (ec *executionContext) marshalNPatientBill2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBillᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PatientBill) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPatientBill2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBill(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPatientBill2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBill(ctx context.Context, sel ast.SelectionSet, v *models.PatientBill) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PatientBill(ctx, sel, v)
}

func (ec *executionContext) marshalNPatientLatestDepositRecords2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestDepositRecords(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PatientLatestDepositRecords) graphql.Marshaler {
	return ec._PatientLatestDepositRecords(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatientLatestDepositRecords2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestDepositRecords(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PatientLatestDepositRecords) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PatientLatestDepositRecords(ctx, sel, v)
}

func (ec *executionContext) marshalNPatientLatestNonFixedChargeRecords2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestNonFixedChargeRecords(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PatientLatestNonFixedChargeRecords) graphql.Marshaler {
	return ec._PatientLatestNonFixedChargeRecords(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatientLatestNonFixedChargeRecords2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientLatestNonFixedChargeRecords(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PatientLatestNonFixedChargeRecords) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PatientLatestNonFixedChargeRecords(ctx, sel, v)
}

func (ec *executionContext) marshalNPayRecord2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecord(ctx context.Context, sel ast.SelectionSet, v models.PayRecord) graphql.Marshaler {
	return ec._PayRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PayRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPayRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecord(ctx context.Context, sel ast.SelectionSet, v *models.PayRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNPayRecordDetail2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx context.Context, sel ast.SelectionSet, v models.PayRecordDetail) graphql.Marshaler {
	return ec._PayRecordDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayRecordDetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx context.Context, sel ast.SelectionSet, v *models.PayRecordDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayRecordDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPayRecordDetailInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailInput(ctx context.Context, v interface{}) (gqlmodels.PayRecordDetailInput, error) {
	res, err := ec.unmarshalInputPayRecordDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPayRecordDetailType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailType(ctx context.Context, v interface{}) (gqlmodels.PayRecordDetailType, error) {
	var res gqlmodels.PayRecordDetailType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayRecordDetailType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordDetailType(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PayRecordDetailType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPayRecordInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPayRecordInput(ctx context.Context, v interface{}) (gqlmodels.PayRecordInput, error) {
	res, err := ec.unmarshalInputPayRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx context.Context, v interface{}) (pq.StringArray, error) {
	res, err := models.UnmarshalPgStringArray(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx context.Context, sel ast.SelectionSet, v pq.StringArray) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := models.MarshalPgStringArray(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPrivacyType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPrivacyType(ctx context.Context, v interface{}) (gqlmodels.PrivacyType, error) {
	var res gqlmodels.PrivacyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrivacyType2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPrivacyType(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PrivacyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNSubsidySetting2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySetting(ctx context.Context, sel ast.SelectionSet, v models.SubsidySetting) graphql.Marshaler {
	return ec._SubsidySetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubsidySetting2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubsidySetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubsidySetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSubsidySetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidySetting(ctx context.Context, sel ast.SelectionSet, v *models.SubsidySetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SubsidySetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSubsidySettingInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.SubsidySettingInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.SubsidySettingInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSubsidySettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSubsidySettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingInput(ctx context.Context, v interface{}) (*gqlmodels.SubsidySettingInput, error) {
	res, err := ec.unmarshalInputSubsidySettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSubsidySettingUpdateInput2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.SubsidySettingUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.SubsidySettingUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSubsidySettingUpdateInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSubsidySettingUpdateInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐSubsidySettingUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.SubsidySettingUpdateInput, error) {
	res, err := ec.unmarshalInputSubsidySettingUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTransferRefundLeave2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx context.Context, sel ast.SelectionSet, v models.TransferRefundLeave) graphql.Marshaler {
	return ec._TransferRefundLeave(ctx, sel, &v)
}

func (ec *executionContext) marshalNTransferRefundLeave2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeaveᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TransferRefundLeave) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferRefundLeave2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTransferRefundLeave2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx context.Context, sel ast.SelectionSet, v *models.TransferRefundLeave) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TransferRefundLeave(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTransferRefundLeaveInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveInput(ctx context.Context, v interface{}) (gqlmodels.TransferRefundLeaveInput, error) {
	res, err := ec.unmarshalInputTransferRefundLeaveInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTransferRefundLeaveItem2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveItemᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.TransferRefundLeaveItem, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.TransferRefundLeaveItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTransferRefundLeaveItem2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveItem(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNTransferRefundLeaveItem2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTransferRefundLeaveItem(ctx context.Context, v interface{}) (*gqlmodels.TransferRefundLeaveItem, error) {
	res, err := ec.unmarshalInputTransferRefundLeaveItem(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePatientBillChargeDatesInput2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillChargeDatesInput(ctx context.Context, v interface{}) (gqlmodels.UpdatePatientBillChargeDatesInput, error) {
	res, err := ec.unmarshalInputUpdatePatientBillChargeDatesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUploadFileResponse2graphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUploadFileResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UploadFileResponse) graphql.Marshaler {
	return ec._UploadFileResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUploadFileResponse2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUploadFileResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UploadFileResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UploadFileResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOBasicCharge2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicCharge(ctx context.Context, sel ast.SelectionSet, v []*models.BasicCharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBasicCharge2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicCharge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBasicCharge2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐBasicCharge(ctx context.Context, sel ast.SelectionSet, v *models.BasicCharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BasicCharge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐBasicChargeInput(ctx context.Context, v interface{}) (*gqlmodels.BasicChargeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBasicChargeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOCreatePatientBillBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐCreatePatientBillBasicChargeInput(ctx context.Context, v interface{}) (*gqlmodels.CreatePatientBillBasicChargeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreatePatientBillBasicChargeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreatePatientBillSubsidyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐCreatePatientBillSubsidyInput(ctx context.Context, v interface{}) (*gqlmodels.CreatePatientBillSubsidyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreatePatientBillSubsidyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepositRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx context.Context, sel ast.SelectionSet, v []*models.DepositRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODepositRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODepositRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐDepositRecord(ctx context.Context, sel ast.SelectionSet, v *models.DepositRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepositRecord(ctx, sel, v)
}

func (ec *executionContext) marshalODetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐDetail(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Detail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Detail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEraType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐEraType(ctx context.Context, v interface{}) (*gqlmodels.EraType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodels.EraType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEraType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐEraType(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.EraType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOMonthType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐMonthType(ctx context.Context, v interface{}) (*gqlmodels.MonthType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodels.MonthType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMonthType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐMonthType(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.MonthType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONonFixedChargeRecord2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, v []*models.NonFixedChargeRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONonFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONonFixedChargeRecord2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐNonFixedChargeRecord(ctx context.Context, sel ast.SelectionSet, v *models.NonFixedChargeRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NonFixedChargeRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalONonFixedChargeRecordInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐNonFixedChargeRecordInput(ctx context.Context, v interface{}) (*gqlmodels.NonFixedChargeRecordInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNonFixedChargeRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationBasicChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationBasicChargeSettingInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationBasicChargeSettingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationBasicChargeSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationBillDateRangeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationBillDateRangeSettingInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationBillDateRangeSettingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationBillDateRangeSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationNonFixedChargeSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationNonFixedChargeSettingInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationNonFixedChargeSettingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationNonFixedChargeSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationPrivacyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationPrivacyInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationPrivacyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationPrivacyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationReceipt2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceipt(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationReceipt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationReceipt(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationReceiptInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationReceiptInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationReceiptInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationReceiptInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganizationReceiptTemplateSetting2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐOrganizationReceiptTemplateSetting(ctx context.Context, sel ast.SelectionSet, v *models.OrganizationReceiptTemplateSetting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationReceiptTemplateSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationSettingInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐOrganizationSettingInput(ctx context.Context, v interface{}) (*gqlmodels.OrganizationSettingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPatient2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx context.Context, sel ast.SelectionSet, v models.Patient) graphql.Marshaler {
	return ec._Patient(ctx, sel, &v)
}

func (ec *executionContext) marshalOPatient2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatient(ctx context.Context, sel ast.SelectionSet, v *models.Patient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Patient(ctx, sel, v)
}

func (ec *executionContext) marshalOPatientBill2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPatientBill(ctx context.Context, sel ast.SelectionSet, v *models.PatientBill) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PatientBill(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPatientBillInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientBillInput(ctx context.Context, v interface{}) (*gqlmodels.PatientBillInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPatientBillInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPatientBillsInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐPatientBillsInput(ctx context.Context, v interface{}) (*gqlmodels.PatientBillsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPatientBillsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPayRecordDetail2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx context.Context, sel ast.SelectionSet, v []*models.PayRecordDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPayRecordDetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPayRecordDetail2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐPayRecordDetail(ctx context.Context, sel ast.SelectionSet, v *models.PayRecordDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PayRecordDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx context.Context, v interface{}) (pq.StringArray, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalPgStringArray(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPgStringArray2githubᚗcomᚋlibᚋpqᚐStringArray(ctx context.Context, sel ast.SelectionSet, v pq.StringArray) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalPgStringArray(v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSubsidy2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidy(ctx context.Context, sel ast.SelectionSet, v []*models.Subsidy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSubsidy2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSubsidy2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐSubsidy(ctx context.Context, sel ast.SelectionSet, v *models.Subsidy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Subsidy(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTaxType2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx context.Context, v interface{}) ([]*gqlmodels.TaxType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.TaxType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTaxType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTaxType2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.TaxType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTaxType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOTaxType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx context.Context, v interface{}) (*gqlmodels.TaxType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodels.TaxType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaxType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐTaxType(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.TaxType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOTransferRefundItemsJsonType2gormᚗioᚋdatatypesᚐJSON(ctx context.Context, v interface{}) (datatypes.JSON, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalTransferRefundItemsJsonType(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTransferRefundItemsJsonType2gormᚗioᚋdatatypesᚐJSON(ctx context.Context, sel ast.SelectionSet, v datatypes.JSON) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return models.MarshalTransferRefundItemsJsonType(v)
}

func (ec *executionContext) marshalOTransferRefundLeave2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx context.Context, sel ast.SelectionSet, v []*models.TransferRefundLeave) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransferRefundLeave2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTransferRefundLeave2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐTransferRefundLeave(ctx context.Context, sel ast.SelectionSet, v *models.TransferRefundLeave) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferRefundLeave(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpdatePatientBillBasicChargeInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillBasicChargeInput(ctx context.Context, v interface{}) (*gqlmodels.UpdatePatientBillBasicChargeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdatePatientBillBasicChargeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdatePatientBillNoteInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillNoteInput(ctx context.Context, v interface{}) (*gqlmodels.UpdatePatientBillNoteInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdatePatientBillNoteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdatePatientBillSubsidyInput2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUpdatePatientBillSubsidyInput(ctx context.Context, v interface{}) (*gqlmodels.UpdatePatientBillSubsidyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdatePatientBillSubsidyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2graphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserPreference2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐUserPreference(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UserPreference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserPreference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOYearType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐYearType(ctx context.Context, v interface{}) (*gqlmodels.YearType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodels.YearType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOYearType2ᚖgraphqlᚑgoᚑtemplateᚋinternalᚋgqlᚋmodelsᚐYearType(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.YearType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
